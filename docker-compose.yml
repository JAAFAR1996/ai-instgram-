# ================================
# AI Sales Platform - Docker
# Professional Production Setup
# ================================

version: '3.8'

services:
  # üöÄ AI Sales Platform API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ai-sales-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://ai_sales_user:${POSTGRES_PASSWORD}@postgres:5432/ai_sales_platform
      REDIS_URL: redis://redis:6379
    env_file:
      - .env.production
    depends_on:
      - postgres
      - redis
    networks:
      - ai-sales-network
    volumes:
      - app-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üíæ PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-sales-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_sales_platform
      POSTGRES_USER: ai_sales_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - ai-sales-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_sales_user -d ai_sales_platform"]
      interval: 30s
      timeout: 5s
      retries: 5

  # ‚ö° Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: ai-sales-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
      - ./config/redis-prod.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - ai-sales-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5

  # üåê Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-sales-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - ai-sales-network

  # üìä Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-sales-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ai-sales-network

  # üìà Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ai-sales-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - ai-sales-network

networks:
  ai-sales-network:
    driver: bridge
    name: ai-sales-network

volumes:
  postgres-data:
    driver: local
    name: ai-sales-postgres-data
  
  redis-data:
    driver: local
    name: ai-sales-redis-data
  
  prometheus-data:
    driver: local
    name: ai-sales-prometheus-data
  
  grafana-data:
    driver: local
    name: ai-sales-grafana-data
  
  app-logs:
    driver: local
    name: ai-sales-app-logs
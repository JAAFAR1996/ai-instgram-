file,line,kind,code
src/routes/webhooks.ts,51,: any,"async function extractMerchantId(webhookEvent: any): Promise<string> {"
src/routes/webhooks.ts,84,: any,"  } catch (error: any) {"
src/routes/webhooks.ts,127,: any,"    } catch (error: any) {"
src/routes/webhooks.ts,137,as any,"      const rawBody = (c as any).rawBody;"
src/routes/webhooks.ts,237,: any,"      } catch (enqueueError: any) {"
src/routes/webhooks.ts,249,: any,"    } catch (error: any) {"
src/routes/webhooks.ts,262,: any,"      } catch (dlqError: any) {"
src/routes/webhooks.ts,316,: any,"      } catch (error: any) {"
src/routes/webhooks.ts,349,: any,"  } catch (error: any) {"
src/repos/unit-of-work.ts,65,: any,"      } catch (error: any) {"
src/bootstrap/logging.ts,24,: any,"        (...args: any[]) => {"
src/cache/index.ts,66,: any,"    } catch (error: any) {"
src/cache/index.ts,105,: any,"    } catch (error: any) {"
src/cache/index.ts,137,: any,"    } catch (error: any) {"
src/cache/index.ts,164,: any,"    } catch (error: any) {"
src/cache/index.ts,199,: any,"    } catch (error: any) {"
src/cache/index.ts,239,: any,"    } catch (error: any) {"
src/cache/index.ts,314,: any,"  async setTemplate(merchantId: string, templateId: string, template: any): Promise<boolean> {"
src/cache/index.ts,332,: any,"  async setSession(sessionId: string, sessionData: any): Promise<boolean> {"
src/api/webhooks.ts,171,: any,"  private async handleInstagramVerification(c: any) {"
src/api/webhooks.ts,210,: any,"  private async handleInstagramWebhook(c: any) {"
src/api/webhooks.ts,404,: any,"  private async processInstagramEntry(entry: any): Promise<void> {"
src/api/webhooks.ts,470,: any,"  private async processWhatsAppEntry(entry: any): Promise<void> {"
src/api/webhooks.ts,558,: any,"    details: any"
src/api/webhooks.ts,589,: any,"  private generateMerchantBodyHash(merchantId: string, body: any): string {"
src/api/webhooks.ts,599,: any,"    body: any,"
src/repositories/message-repository.ts,217,: any,"    const params: any[] = [];"
src/repositories/message-repository.ts,243,: any,"    const params: any[] = [];"
src/repositories/message-repository.ts,371,: any,"    const params: any[] = [];"
src/repositories/message-repository.ts,471,: any,"    const params: any[] = [];"
src/startup/validation.ts,17,: any,"  details?: any;"
src/startup/validation.ts,594,as any,"    const sql = db.getSQL() as any;"
src/repos/template.repo.ts,151,: any,"  let params: any[] = [merchantId];"
src/repos/template.repo.ts,215,: any,"  const params: any[] = [];"
src/utils/timer-manager.ts,42,: any,"    (handler: (...a: any[]) => void, timeout?: number, ...args: any[]) => {"
src/utils/timer-manager.ts,51,: any,"    (handler: (...a: any[]) => void, timeout?: number, ...args: any[]) => {"
src/database/seed.ts,70,as any,"    const sql = this.db.getSQL() as any;"
src/database/seed.ts,121,: any,"      VALUES ${merchantsData.map((m: any) => ["
src/database/seed.ts,131,: any,"    return merchants.map((m: any) => m.id);"
src/database/seed.ts,140,as any,"    const sql = this.db.getSQL() as any;"
src/database/seed.ts,306,as any,"        p.merchant_id, p.sku, p.name_ar, (p as any).name_en ?? null, p.description_ar, p.category,"
src/database/seed.ts,308,as any,"        p.attributes ?? '{}', (p as any).variants ?? '[]', (p as any).images ?? '[]', "
src/database/seed.ts,309,as any,"        (p as any).tags ?? [], (p as any).is_featured ?? false, (p as any).is_on_sale ?? false, (p as any).sale_price_usd ?? null"
src/database/seed.ts,322,as any,"    const sql = this.db.getSQL() as any;"
src/database/seed.ts,407,: any,"    return conversations.map((c: any) => c.id);"
src/database/seed.ts,416,as any,"    const sql = this.db.getSQL() as any;"
src/database/seed.ts,524,as any,"    const sql = this.db.getSQL() as any;"
src/database/seed.ts,583,: any,"      VALUES ${messagesData.map((m: any) => ["
src/routes/utility-messages.ts,107,: any,"    } catch (error: any) {"
src/routes/utility-messages.ts,163,: any,"    } catch (error: any) {"
src/routes/utility-messages.ts,200,: any,"    } catch (error: any) {"
src/routes/utility-messages.ts,240,: any,"    } catch (error: any) {"
src/routes/utility-messages.ts,265,: any,"    } catch (error: any) {"
src/startup/validation.test.ts,53,: any,"const mockSQL = mock((strings: TemplateStringsArray, ...values: any[]) => {"
src/startup/validation.test.ts,111,as any,"global.fetch = mockFetch as any;"
src/startup/validation.test.ts,115,: any,"  let consoleSpy: any;"
src/repositories/merchant-repository.ts,260,as any,"      SET ${(sql as any).join(updateFields, sql`, `)}"
src/repositories/merchant-repository.ts,373,as any,"      ? sql`WHERE ${(sql as any).join(conditions, sql` AND `)}`"
src/repositories/merchant-repository.ts,382,as any,"        WHERE ${(sql as any).join(conditions, sql` AND `)}"
src/repositories/merchant-repository.ts,520,as any,"      ? sql`WHERE ${(sql as any).join(conditions, sql` AND `)}`"
src/api/utility-messages.ts,315,as any,"      const sql = db.getSQL() as any;"
src/api/service-control.test.ts,22,: any,"    securityHeaders: async (_c: any, next: any) => {"
src/api/service-control.test.ts,25,: any,"    rateLimiter: async (c: any, next: any) => {"
src/api/service-control.test.ts,52,: any,"  let api: any;"
src/api/service-control.test.ts,53,: any,"  let app: any;"
src/api/service-control.test.ts,54,: any,"  let db: any;"
src/api/service-control.test.ts,55,: any,"  let sql: any;"
src/api/service-control.test.ts,321,: any,"      services.forEach((service: any) => {"
src/api/service-control.test.ts,355,: any,"      services.forEach((service: any) => {"
src/api/service-control.test.ts,377,: any,"      const instagramHealth = healthData.find((h: any) => h.service === 'انستغرام');"
src/internal/test/dev-routes.ts,18,: any,"  async query(sql: string, params: any[] = []): Promise<any[]> {"
src/internal/test/dev-routes.ts,30,: any,"  async testRLS(): Promise<{ withoutContext: any[]; withContext: any[] }> {"
src/internal/test/dev-routes.ts,45,: any,"  private dlq: any[] = [];"
src/internal/test/dev-routes.ts,48,: any,"  async addJob(eventId: string, data: any): Promise<{ duplicate: boolean; jobId?: string }> {"
src/internal/test/dev-routes.ts,89,: any,"  getDLQStats(): { jobs: number; entries: any[] } {"
src/database/rls-wrapper.ts,31,as any,"    const sql = this.db.getSQL() as any;"
src/database/rls-wrapper.ts,60,as any,"    const sql = this.db.getSQL() as any;"
src/database/rls-wrapper.ts,80,as any,"    const sql = this.db.getSQL() as any;"
src/database/rls-wrapper.ts,103,as any,"    const sql = this.db.getSQL() as any;"
src/database/rls-wrapper.ts,129,: any,"  async query<T>(strings: TemplateStringsArray, ...params: any[]): Promise<T[]> {"
src/database/rls-wrapper.ts,141,as any,"    return await (sql as any)(strings, ...params);"
src/database/rls-wrapper.ts,151,as any,"    const sql = this.db.getSQL() as any;"
src/database/rls-wrapper.ts,152,: any,"    return await sql.transaction(async (trx: any) => {"
src/database/rls-wrapper.ts,225,: any,"  private async logAudit(action: string, userId?: string, details?: any): Promise<void> {"
src/database/rls-wrapper.ts,227,as any,"      const sql = this.db.getSQL() as any;"
src/database/rls-wrapper.ts,261,: any,"    public readonly contextInfo: any"
src/database/migrate.test.ts,18,: any,"  let db: any;"
src/database/migrate.test.ts,19,: any,"  let sql: any;"
src/database/migrate.test.ts,79,: any,"      const columns = tableInfo.map((col: any) => col.column_name);"
src/database/migrate.test.ts,414,: any,"      expect(columns.find((c: any) => c.column_name === 'metadata').data_type).toBe('jsonb');"
src/database/migrate.test.ts,423,: any,"      expect(constraints.some((c: any) => c.constraint_type === 'CHECK')).toBe(true);"
src/database/migrate.test.ts,424,: any,"      expect(constraints.some((c: any) => c.constraint_type === 'UNIQUE')).toBe(true);"
src/repos/message.repo.ts,88,as any,"    status: row.status as any,"
src/repos/message.repo.ts,107,: any,"  const params: any[] = [messageId, status];"
src/repos/message.repo.ts,154,: any,"  let params: any[] = [merchantId];"
src/repos/message.repo.ts,229,as any,"    status: row.status as any,"
src/repos/message.repo.ts,274,: any,"  let params: any[] = [merchantId];"
src/api/service-controller.ts,83,: any,"  private async toggleService(c: any) {"
src/repositories/merchant-repository.test.ts,17,: any,"  let db: any;"
src/repositories/merchant-repository.test.ts,18,: any,"  let sql: any;"
src/repositories/merchant-repository.test.ts,618,as any,"          subscriptionTier: data.tier as any"
src/api/instagram-auth.ts,256,as any,"    }, statusCode as any);"
src/api/instagram-auth.ts,312,as any,"    const account = integration[0] as any;"
src/api/instagram-auth.ts,418,as any,"    const currentToken = (result[0] as any).instagram_access_token;"
src/api/instagram-auth.ts,484,as any,"    const expiresAt = new Date((record as any).token_expires_at);"
src/api/instagram-auth.ts,496,as any,"    const isValid = await oauthService.validateToken((record as any).instagram_access_token);"
src/database/migrate.ts,265,as any,"    const sql = this.db.getSQL() as any;"
src/database/migrate.ts,296,as any,"    const sql = this.db.getSQL() as any;"
src/database/migrate.ts,429,: any,"        status.migrations.forEach((m: any) => {"
src/routes/admin.ts,34,: any,"    } catch (error: any) {"
src/routes/admin.ts,54,: any,"    } catch (error: any) {"
src/routes/admin.ts,65,: any,"    } catch (error: any) {"
src/routes/admin.ts,99,: any,"    } catch (error: any) {"
src/routes/admin.ts,129,: any,"    } catch (error: any) {"
src/routes/admin.ts,158,: any,"    } catch (error: any) {"
src/routes/admin.ts,200,: any,"    } catch (error: any) {"
src/routes/admin.ts,228,: any,"    } catch (error: any) {"
src/routes/admin.ts,252,: any,"    } catch (error: any) {"
src/routes/admin.ts,289,: any,"    } catch (error: any) {"
src/startup/runMigrations.ts,43,: any,"  } catch (e: any) {"
src/repositories/index.ts,171,: any,"    merchants: any;"
src/repositories/index.ts,172,: any,"    conversations: any;"
src/repositories/index.ts,173,: any,"    messages: any;"
src/repositories/index.ts,174,: any,"    credentials: any;"
src/startup/ensurePageMapping.ts,60,: any,"  } catch (e: any) {"
src/startup/redis.ts,83,: any,"  } catch (error: any) {"
src/startup/redis.ts,138,: any,"  } catch (error: any) {"
src/container/index.ts,31,: any,"  aiService?: any;"
src/container/index.ts,32,: any,"  instagramService?: any;"
src/container/index.ts,33,: any,"  webhookService?: any;"
src/container/index.ts,34,: any,"  utilityMessagesService?: any;"
src/container/index.ts,72,: any,"    } catch (error: any) {"
src/container/index.ts,122,: any,"      } catch (error: any) {"
src/container/index.ts,201,: any,"      } catch (error: any) {"
src/container/index.ts,220,: any,"  return function <T extends { new (...args: any[]): {} }>(constructor: T) {"
src/container/index.ts,236,: any,"  return function (target: any, propertyKey: string | symbol | undefined, parameterIndex: number) {"
src/container/index.ts,238,as any,"    const existingTokens = (Reflect as any).getMetadata?.('inject-tokens', target) || [];"
src/container/index.ts,240,as any,"    (Reflect as any).defineMetadata?.('inject-tokens', existingTokens, target);"
src/db/adapter.ts,49,: any,"    } catch (error: any) {"
src/db/adapter.ts,85,: any,"    } catch (error: any) {"
src/db/adapter.ts,119,: any,"    } catch (error: any) {"
src/startup/migrate.ts,97,: any,"async function seedInitialData(client: any): Promise<void> {"
src/infrastructure/db/sql-tag.ts,4,: any,"export type SQLTag = (strings: TemplateStringsArray, ...values: any[]) => Promise<any[]>;"
src/infrastructure/db/sql-tag.ts,6,: any,"function compileTemplate(strings: TemplateStringsArray, values: any[]) {"
src/infrastructure/db/sql-tag.ts,18,: any,"  return async (strings: TemplateStringsArray, ...values: any[]) => {"
src/repositories/conversation-repository.ts,253,: any,"    const updateValues: any[] = [];"
src/repositories/conversation-repository.ts,318,: any,"    let params: any[] = [];"
src/repositories/conversation-repository.ts,386,: any,"    let params: any[] = [];"
src/repositories/conversation-repository.ts,473,: any,"    let params: any[] = [];"
src/db/index.ts,103,: any,"  } catch (error: any) {"
src/db/index.ts,133,: any,"export async function checkDatabaseHealth(): Promise<{ healthy: boolean; details: any }> {"
src/db/index.ts,153,: any,"  } catch (error: any) {"
src/db/index.ts,173,: any,"    } catch (error: any) {"
src/db/index.ts,187,: any,"  params?: any[]"
src/db/index.ts,222,: any,"  } catch (error: any) {"
src/startup/maintenance.ts,33,: any,"  } catch (error: any) {"
src/startup/maintenance.ts,41,: any,"function scheduleQueueMaintenanceTasks(queueManager: any): void {"
src/startup/maintenance.ts,59,: any,"  }).catch((error: any) => {"
src/startup/maintenance.ts,69,: any,"  }).catch((error: any) => {"
src/startup/maintenance.ts,81,: any,"  }).catch((error: any) => {"
src/startup/maintenance.ts,131,: any,"    } catch (error: any) {"
src/startup/maintenance.ts,180,: any,"  } catch (error: any) {"
src/types/shims.d.ts,19,: any,"  [k: string]: any; "
src/services/utility-messages.ts,72,: any,"  private logger!: any;"
src/types/postgres-extensions.d.ts,4,: any,"    join(values: any[], separator: any): Sql<TTypes>;"
src/production-index.ts,92,as any,"        (c as any).rawBody = Buffer.from(body);"
src/production-index.ts,174,: any,"  } catch (error: any) {"
src/production-index.ts,199,: any,"  } catch (error: any) {"
src/queue/db-spool.ts,16,: any,"  jobData: any;"
src/queue/db-spool.ts,27,: any,"  jobData: any;"
src/queue/db-spool.ts,175,: any,"      priorityResult.forEach((row: any) => {"
src/queue/db-spool.ts,179,: any,"      typeResult.forEach((row: any) => {"
src/queue/db-spool.ts,206,as any,"      const deletedCount = (result as any).count || 0;"
src/queue/db-spool.ts,232,as any,"    return ((result as any).count || 0) > 0;"
src/queue/db-spool.ts,246,: any,"  private mapSpooledJob(row: any): SpooledJob {"
src/queue/db-spool.ts,247,: any,"    let jobData: any;"
src/types/instagram.ts,85,: any,"  attachment?: { type: string; payload: any };"
src/services/utility-messages.test.ts,55,: any,"  let mockInstagramClient: any;"
src/services/utility-messages.test.ts,56,: any,"  let mockLogger: any;"
src/services/utility-messages.test.ts,549,as any,"      const service = utilityMessagesService as any;"
src/services/utility-messages.test.ts,559,as any,"      const service = utilityMessagesService as any;"
src/services/utility-messages.test.ts,569,as any,"      const service = utilityMessagesService as any;"
src/services/utility-messages.test.ts,579,as any,"      const service = utilityMessagesService as any;"
src/services/utility-messages.test.ts,589,as any,"      const service = utilityMessagesService as any;"
src/services/utility-messages.test.ts,599,as any,"      const service = utilityMessagesService as any;"
src/services/utility-messages.test.ts,611,as any,"      const service = utilityMessagesService as any;"
src/services/utility-messages.test.ts,627,as any,"      const service = utilityMessagesService as any;"
src/services/utility-messages.test.ts,642,as any,"      const service = utilityMessagesService as any;"
src/services/utility-messages.test.ts,658,as any,"      const service = utilityMessagesService as any;"
src/services/utility-messages.test.ts,676,as any,"      (require('./utility-messages.js') as any).utilityMessagesServiceInstance = null;"
src/services/utility-messages.test.ts,745,as any,"      const service = utilityMessagesService as any;"
src/services/utility-messages.test.ts,755,as any,"      const service = utilityMessagesService as any;"
src/services/utility-messages.test.ts,762,as any,"      const service = utilityMessagesService as any;"
src/services/utility-messages.test.ts,772,as any,"      const service = utilityMessagesService as any;"
src/errors/RedisErrors.test.ts,33,: any,"  let mockLogger: any;"
src/services/instagram-oauth.ts,24,: any,"const jsonAny = async (r: any): Promise<any> => {"
src/services/instagram-oauth.ts,138,as any,"        (e as any).status = res.status;"
src/services/instagram-oauth.ts,143,: any,"    } catch (err: any) {"
src/services/instagram-oauth.ts,290,: any,"      const data: any = await jsonAny(response);"
src/services/instagram-oauth.ts,339,: any,"      const data: any = await this.graphRequest<any>("
src/services/instagram-oauth.ts,371,: any,"      const data: any = await this.graphRequest<any>("
src/services/instagram-oauth.ts,400,: any,"      const data: any = await this.graphRequest<any>("
src/services/instagram-oauth.ts,440,: any,"      const data: any = await jsonAny(response);"
src/services/instagram-oauth.ts,441,: any,"      const grantedPerms = (data.data ?? []).map((p: any) => p.permission);"
src/services/instagram-oauth.ts,505,: any,"      const pagesData: any = await jsonAny(pagesResponse);"
src/services/instagram-oauth.ts,520,: any,"            const igData: any = await jsonAny(igResponse);"
src/services/instagram-oauth.ts,531,: any,"                const accountData: any = await jsonAny(accountResponse);"
src/errors/RedisErrors.ts,136,: any,"  static createFromIORedisError(error: any, context?: Record<string, any>): RedisBaseError {"
src/errors/RedisErrors.ts,197,: any,"    value: any, "
src/errors/RedisErrors.ts,254,: any,"  constructor(private logger?: any) {}"
src/services/monitoring.ts,117,as any,"      const sql = this.db.getSQL() as any;"
src/services/monitoring.ts,205,as any,"      const sql = this.db.getSQL() as any;"
src/services/monitoring.ts,289,as any,"      const sql = this.db.getSQL() as any;"
src/services/monitoring.ts,405,as any,"      const sql = this.db.getSQL() as any;"
src/services/monitoring.ts,416,: any,"    } catch (error: any) {"
src/services/monitoring.ts,434,: any,"    } catch (error: any) {"
src/services/monitoring.ts,478,as any,"      const sql = this.db.getSQL() as any;"
src/services/monitoring.ts,532,as any,"      const sql = this.db.getSQL() as any;"
src/services/monitoring.ts,597,: any,"  private determineQualityStatus(metrics: any): QualityStatus {"
src/services/monitoring.ts,610,: any,"  private generateRecommendations(metrics: any, status: QualityStatus): string[] {"
src/services/monitoring.ts,636,: any,"  private generateAlerts(metrics: any, status: QualityStatus): QualityAlert[] {"
src/services/monitoring.ts,675,: any,"    metrics: any,"
src/services/monitoring.ts,679,as any,"      const sql = this.db.getSQL() as any;"
src/services/monitoring.ts,764,as any,"      const sql = this.db.getSQL() as any;"
src/services/monitoring.ts,803,: any,"  return (req: any, res: any, next: any) => {"
src/services/monitoring.ts,807,: any,"    res.end = function(...args: any[]) {"
src/services/UpstashQuotaMonitor.ts,22,: any,"    private logger: any,"
src/services/UpstashQuotaMonitor.ts,50,: any,"      const data: any = await response.json();"
src/isolation/context.ts,6,: any,"export function serr(e: any) {"
src/isolation/context.ts,55,: any,"  fn: (client: any) => Promise<T>"
src/isolation/context.ts,98,: any,"  logger: any,"
src/isolation/context.ts,99,: any,"  handler: (job: any, data: JobData, client: any) => Promise<T>"
src/isolation/context.ts,101,: any,"  return async (job: any) => {"
src/isolation/context.ts,158,: any,"  logger: any,"
src/isolation/context.ts,159,: any,"  handler: (job: any, data: WebhookJobData, client: any) => Promise<T>"
src/isolation/context.ts,161,: any,"  return async (job: any) => {"
src/isolation/context.ts,188,: any,"  logger: any,"
src/isolation/context.ts,189,: any,"  handler: (job: any, data: AIJobData, client: any) => Promise<T>"
src/isolation/context.ts,191,: any,"  return async (job: any) => {"
src/isolation/context.ts,216,: any,"async function handleTenantJobError(error: any, job: any, logger: any) {"
src/services/RedisConnectionManager.ts,69,: any,"    private logger?: any,"
src/services/RedisConnectionManager.ts,370,: any,"    } catch (error: any) {"
src/services/RedisConnectionManager.ts,499,: any,"      } catch (error: any) {"
src/services/RedisConnectionManager.ts,523,: any,"      } catch (error: any) {"
src/tests/utility-messages.test.ts,48,: any,"    getSQL: () => async (strings: TemplateStringsArray, ...params: any[]) => {"
src/middleware/security.ts,105,: any,"    } catch (rejRes: any) {"
src/middleware/security.ts,142,: any,"    } catch (rejRes: any) {"
src/middleware/security.ts,242,: any,"    } catch (rejRes: any) {"
src/tests/instagram-token-retrieval.test.ts,33,as any,"    (globalThis as any).requireMerchantId = () => 'merchant1';"
src/tests/instagram-token-retrieval.test.ts,39,as any,"    (client as any).db = { getSQL: () => mock(async () => [{"
src/tests/instagram-token-retrieval.test.ts,43,as any,"    }]) } as any;"
src/tests/instagram-token-retrieval.test.ts,51,as any,"    (globalThis as any).fetch = fetchMock;"
src/tests/instagram-token-retrieval.test.ts,73,as any,"    (service as any).db = { getSQL: () => sqlMock } as any;"
src/tests/instagram-token-retrieval.test.ts,75,as any,"    (service as any).getMerchantInstagramUserId = async () => 'ig_user_1';"
src/tests/instagram-token-retrieval.test.ts,76,as any,"    (service as any).getMessageContext = async () => ({ conversationId: '', withinWindow: true });"
src/tests/instagram-token-retrieval.test.ts,77,as any,"    (service as any).logSentMessage = async () => {};"
src/tests/instagram-token-retrieval.test.ts,78,as any,"    (service as any).logFailedMessage = async () => {};"
src/tests/instagram-token-retrieval.test.ts,80,: any,"    const fetchMock = mock(async (_url: string, options: any) => {"
src/tests/instagram-token-retrieval.test.ts,82,as any,"      return { ok: true, json: async () => ({ message_id: 'mid1' }) } as any;"
src/tests/instagram-token-retrieval.test.ts,84,as any,"    (globalThis as any).fetch = fetchMock;"
src/services/instagram-messaging.ts,95,: any,"    messagePayload: any"
src/services/instagram-messaging.ts,118,: any,"        const data: any = await response.json();"
src/services/instagram-messaging.ts,216,: any,"      const responseData: any = await this.sendGraphMessage("
src/services/instagram-messaging.ts,321,: any,"      const responseData: any = await this.sendGraphMessage("
src/services/instagram-messaging.ts,437,: any,"      const responseData: any = await this.sendGraphMessage("
src/services/instagram-messaging.ts,493,: any,"      const result: any[] = await sql`"
src/services/instagram-messaging.ts,545,: any,"      const result: any[] = await sql`"
src/services/instagram-messaging.ts,568,: any,"      const result: any[] = await sql`"
src/services/instagram-messaging.ts,621,: any,"    options: any"
src/services/instagram-messaging.ts,672,: any,"    options: any"
src/services/health-check.ts,41,: any,"  } catch (error: any) {"
src/services/health-check.ts,50,as any,"  const ok = (redis as any).ok === true;"
src/services/health-check.ts,62,: any,"    try { snapshot = await compute(); } catch (e: any) {"
src/services/health-check.ts,69,as any,"  (timer as any).unref?.();"
src/services/monitoring.test.ts,62,: any,"  let db: any;"
src/services/monitoring.test.ts,63,: any,"  let sql: any;"
src/services/redis-monitoring.ts,45,: any,"  private redis: any;"
src/services/redis-monitoring.ts,53,: any,"  constructor(redisConnection?: any) {"
src/services/redis-monitoring.ts,57,: any,"  setRedisConnection(redis: any): void {"
src/services/redis-monitoring.ts,204,: any,"export function getRedisMonitor(redisConnection?: any): RedisMonitor {"
src/tests/sql-injection.test.ts,14,: any,"  let sql: any;"
src/middleware/security.test.ts,82,: any,"  let client: any;"
src/middleware/security.test.ts,115,as any,"      } as any as Context;"
src/middleware/security.test.ts,129,as any,"      } as any as Context;"
src/middleware/security.test.ts,140,as any,"      } as any as Context;"
src/middleware/security.test.ts,154,as any,"      } as any as Context;"
src/tests/instagram-oauth.test.ts,47,: any,"const sql = async (strings: TemplateStringsArray, ...values: any[]) => {"
src/tests/instagram-oauth.test.ts,102,as any,"  delete (globalThis as any).fetch;"
src/tests/instagram-oauth.test.ts,121,as any,"    (globalThis as any).fetch = mock(async () => ({"
src/tests/instagram-oauth.test.ts,133,as any,"    (service as any).exchangeForLongLivedToken = mock(async () => ({"
src/tests/instagram-oauth.test.ts,138,as any,"    (globalThis as any).fetch = mock(async () => ({"
src/services/instagram-message-sender.ts,21,: any,"  attachment: { type: string; payload: any };"
src/services/instagram-message-sender.ts,750,: any,"  private convertToInstagramTemplate(template: MessageTemplate): any {"
src/services/instagram-message-sender.ts,799,: any,"    metadata?: any"
src/services/instagram-message-sender.ts,911,: any,"    metadata?: any"
src/services/meta-rate-limiter.ts,264,: any,"          const err: any = new Error('RATE_LIMIT_EXCEEDED');"
src/services/encryption.ts,68,: any,"export async function readRawBody(c: any, maxBytes = 1024 * 1024): Promise<Buffer> {"
src/services/telemetry.test.ts,36,: any,"  let mockLogger: any;"
src/services/telemetry.test.ts,37,: any,"  let originalPerformance: any;"
src/services/telemetry.test.ts,63,as any,"    } as any;"
src/services/telemetry.test.ts,628,as any,"      (require('./telemetry.js') as any).telemetryServiceInstance = null;"
src/services/telemetry.test.ts,697,: any,"      const circularObj: any = { name: 'test' };"
src/middleware/idempotency.ts,187,: any,"export function hashMerchantAndBody(merchantId: string, body: any): string {"
src/tests/rls-wrapper.test.ts,10,as any,"      const id = (db as any).generateSessionId();"
src/services/ProductionQueueManager.ts,11,: any,"      (resolve: (v: T) => void, reject: (e: any) => void, clear?: () => void) =>"
src/services/ProductionQueueManager.ts,19,: any,"      (resolve: (v: T) => void, reject: (e: any) => void, clear?: () => void) =>"
src/services/ProductionQueueManager.ts,20,: any,"      (e: any) => {"
src/services/ProductionQueueManager.ts,64,: any,"  payload: any;"
src/services/ProductionQueueManager.ts,75,: any,"  connectionInfo?: any;"
src/services/ProductionQueueManager.ts,77,: any,"    redisConnection?: any;"
src/services/ProductionQueueManager.ts,78,: any,"    queueHealth?: any;"
src/services/ProductionQueueManager.ts,79,: any,"    circuitBreaker?: any;"
src/services/ProductionQueueManager.ts,134,: any,"    private logger: any,"
src/services/ProductionQueueManager.ts,844,: any,"    payload: any,"
src/services/ProductionQueueManager.ts,1244,: any,"  private async processAIResponseJob(jobData: any): Promise<any> {"
src/services/ProductionQueueManager.ts,1273,: any,"      let context: any;"
src/services/ProductionQueueManager.ts,1591,: any,"    redisHealth: any;"
src/services/ProductionQueueManager.ts,1769,: any,"    jobData: any,"
src/services/ProductionQueueManager.ts,1781,: any,"      conversationHistory: messageHistory.map((msg: any) => ({"
src/services/ProductionQueueManager.ts,1816,: any,"    jobData: any,"
src/services/ProductionQueueManager.ts,1842,: any,"    jobData: any,"
src/services/ProductionQueueManager.ts,1875,: any,"  private async processNotificationJob(jobData: any): Promise<any> {"
src/services/ProductionQueueManager.ts,1940,: any,"  private async processMessageDeliveryJob(jobData: any): Promise<any> {"
src/middleware/rls-merchant-isolation.ts,43,as any,"      const h1 = (c.req as any).header?.(name);"
src/middleware/rls-merchant-isolation.ts,47,as any,"      const h3 = (c.req as any).headers?.get?.(name);"
src/middleware/rls-merchant-isolation.ts,60,as any,"      const q = (c.req as any).query?.(name);"
src/middleware/rls-merchant-isolation.ts,222,: any,"export function createMerchantSQL(sql: any) {"
src/tests/instagram-messaging.test.ts,15,as any,"      return 0 as any;"
src/tests/instagram-messaging.test.ts,46,as any,"      return 0 as any;"
src/services/instagram-media-manager.ts,478,: any,"      const totalMedia = mediaStats.reduce((sum: number, stat: any) => sum + Number(((stat as unknown) as { type_count: string })?.type_count ?? 0), 0);"
src/services/instagram-media-manager.ts,479,: any,"      const totalResponses = mediaStats.reduce((sum: number, stat: any) => sum + Number(((stat as unknown) as { responses: string })?.responses ?? 0), 0);"
src/services/instagram-media-manager.ts,491,: any,"        topMediaTemplates: templateStats.map((template: any) => ({"
src/services/encryption.test.ts,25,: any,"        const err: any = new Error(message);"
src/middleware/auto-tenant-context.ts,127,as any,"      }) as any;"
src/services/service-controller.ts,85,as any,"    this.pool = (this.db as any).poolInstance;"
src/services/service-controller.ts,200,: any,"      result.forEach((row: any) => {"
src/services/service-controller.ts,291,as any,"          service: service as any,"
src/services/service-controller.ts,327,as any,"          service: service as any,"
src/services/service-controller.ts,363,: any,"      return healthData.map((row: any) => {"
src/services/service-controller.ts,398,: any,"    context?: any"
src/services/service-controller.ts,427,as any,"          service: service as any,"
src/tests/instagram-integration.test.ts,25,: any,"          create: async (params: any) => ({"
src/tests/instagram-integration.test.ts,29,: any,"                  message: params.messages.some((m: any) => m.content?.includes('منتجات')) "
src/tests/instagram-integration.test.ts,35,: any,"                  visualStyle: params.messages.some((m: any) => m.content?.includes('comment')) ? 'post' : 'dm'"
src/tests/instagram-integration.test.ts,50,: any,"    securityHeaders: async (_c: any, next: any) => {"
src/tests/instagram-integration.test.ts,53,: any,"    rateLimiter: async (c: any, next: any) => {"
src/tests/instagram-integration.test.ts,77,: any,"  let db: any;"
src/tests/instagram-integration.test.ts,78,: any,"  let sql: any;"
src/tests/instagram-integration.test.ts,503,as any,"      (router as any).processInstagramEntry = async () => { processed++; };"
src/tests/instagram-integration.test.ts,534,as any,"      (router as any).processInstagramEntry = async () => {};"
src/tests/instagram-media-manager.test.ts,40,as any,"      (manager as any).getMediaTemplate = async () => ({"
src/tests/instagram-media-manager.test.ts,50,as any,"      (manager as any).incrementTemplateUsage = async () => {};"
src/tests/instagram-media-manager.test.ts,51,as any,"      (manager as any).generateTemplateCaption = () => 'generated caption';"
src/tests/hashtag-growth.test.ts,5,as any,"  const sqlStub = { unsafe: async () => [result] } as any;"
src/tests/hashtag-growth.test.ts,9,as any,"  } as any;"
src/tests/hashtag-growth.test.ts,15,as any,"    const growth = await (InstagramHashtagMentionProcessor.prototype as any).calculateHashtagGrowth.call("
src/tests/hashtag-growth.test.ts,26,as any,"    const growth = await (InstagramHashtagMentionProcessor.prototype as any).calculateHashtagGrowth.call("
src/tests/hashtag-growth.test.ts,37,as any,"    const growth = await (InstagramHashtagMentionProcessor.prototype as any).calculateHashtagGrowth.call("
src/tests/hashtag-growth.test.ts,48,as any,"    const growth = await (InstagramHashtagMentionProcessor.prototype as any).calculateHashtagGrowth.call("
src/services/instagram-hashtag-mention-processor.ts,366,as any,"          influencerMentions: Number((mentionStats.find(s => ((s as unknown) as { mention_type: string })?.mention_type === 'influencer') as any)?.count ?? 0),"
src/services/instagram-hashtag-mention-processor.ts,367,as any,"          customerMentions: Number((mentionStats.find(s => ((s as unknown) as { mention_type: string })?.mention_type === 'customer') as any)?.count ?? 0),"
src/services/instagram-hashtag-mention-processor.ts,368,as any,"          competitorMentions: Number((mentionStats.find(s => ((s as unknown) as { mention_type: string })?.mention_type === 'competitor') as any)?.count ?? 0)"
src/services/instagram-hashtag-mention-processor.ts,778,: any,"  private generateHashtagStrategy(trend: any): string {"
src/services/instagram-hashtag-mention-processor.ts,800,: any,"  private generateMentionResponse(mention: string, type: string, sentiment: string, data: any): string {"
src/services/instagram-hashtag-mention-processor.ts,874,as any,"        ) VALUES ${(sql as any).join(values, sql`, `)}"
src/services/logger.ts,20,: any,"  [key: string]: any;"
src/services/logger.ts,112,: any,"  error(arg1: string | LogContext, arg2?: any, arg3?: LogContext): void {"
src/services/logger.ts,130,: any,"  fatal(arg1: string | LogContext, arg2?: any, arg3?: LogContext): void {"
src/services/logger.ts,146,: any,"  private log(level: LogLevel, message: string, context?: LogContext & { err?: any; error?: any }): void {"
src/services/logger.ts,149,: any,"    const ctx = this.redactSensitiveData({ ...this.context, ...(context || {}) }) as LogContext & { err?: any; error?: any };"
src/services/logger.ts,150,as any,"    const { err, error, ...safeCtx } = ctx as any;"
src/services/logger.ts,169,as any,"      delete (entry as any).timestamp;"
src/services/logger.ts,208,: any,"  private redactSensitiveData(data: any): any {"
src/tests/instagram-message-sender.test.ts,8,: any,"  let client: any;"
src/tests/instagram-message-sender.test.ts,41,as any,"    })) as any;"
src/tests/instagram-message-sender.test.ts,62,as any,"    })) as any;"
src/tests/instagram-message-sender.test.ts,69,: any,"  let sender: any;"
src/tests/instagram-message-sender.test.ts,70,: any,"  let loadCredsMock: any;"
src/tests/instagram-message-sender.test.ts,116,: any,"  let sender: any;"
src/tests/instagram-message-sender.test.ts,117,: any,"  let errorMock: any;"
src/tests/instagram-message-sender.test.ts,125,: any,"      sendMessage: mock(async (_cred: any, _merchant: string, { recipientId }: any) => {"
src/tests/instagram-message-sender.test.ts,147,: any,"        getWindowStatus: mock(async (_merchantId: string, recipient: any) => {"
src/services/cross-platform-conversation-manager.ts,630,: any,"  private async buildUnifiedContext(conversations: any[]): Promise<UnifiedConversationContext> {"
src/services/cross-platform-conversation-manager.ts,635,: any,"    contexts.forEach((ctx: any, index) => {"
src/services/cross-platform-conversation-manager.ts,637,: any,"        ctx.cart.forEach((item: any) => {"
src/services/cross-platform-conversation-manager.ts,648,: any,"    const mergedPreferences: CustomerPreferences = contexts.reduce((merged, ctx: any) => {"
src/services/cross-platform-conversation-manager.ts,666,: any,"    const interests = Array.from(new Set(contexts.flatMap((ctx: any) => ctx.interests || [])));"
src/services/cross-platform-conversation-manager.ts,673,: any,"      budget: contexts.find((ctx: any) => ctx.budget)?.budget || { currency: 'IQD' },"
src/services/cross-platform-conversation-manager.ts,674,: any,"      urgency: contexts.find((ctx: any) => ctx.urgency)?.urgency || 'medium',"
src/services/cross-platform-conversation-manager.ts,676,: any,"      location: contexts.find((ctx: any) => ctx.location)?.location"
src/services/cross-platform-conversation-manager.ts,688,: any,"  private async generateCustomerTags(conversations: any[], platformProfiles: PlatformProfile[]): Promise<string[]> {"
src/services/cross-platform-conversation-manager.ts,737,: any,"    sourceConversation: any"
src/services/cross-platform-conversation-manager.ts,773,: any,"    sourceConversation: any,"
src/services/cross-platform-conversation-manager.ts,774,: any,"    targetConversation: any,"
src/services/cross-platform-conversation-manager.ts,835,: any,"  private selectPrimaryConversation(conversations: any[], strategy: string): any {"
src/services/cross-platform-conversation-manager.ts,848,: any,"  private async mergeConversationContexts(conversations: any[]): Promise<any> {"
src/services/cross-platform-conversation-manager.ts,849,: any,"    const mergedContext: any = {"
src/services/cross-platform-conversation-manager.ts,881,: any,"    mergedContext.cart = mergedContext.cart.filter((it: any) => {"
src/services/cross-platform-conversation-manager.ts,1032,: any,"  context: any;"
src/services/cross-platform-conversation-manager.ts,1040,: any,"  details: any;"
src/services/RedisSimpleHealthCheck.ts,75,: any,"  } catch (error: any) {"
src/tests/meta-rate-limiter.test.ts,56,as any,"    (limiter as any).redis = new FakeRedisManager();"
src/tests/meta-rate-limiter.test.ts,65,as any,"    const store = (limiter as any).redis.connection.store as Map<string, Set<string>>;"
src/tests/oauth-session-pkce.test.ts,48,: any,"const sql = async (strings: TemplateStringsArray, ...values: any[]) => {"
src/tests/oauth-session-pkce.test.ts,99,as any,"  delete (global as any).fetch;"
src/tests/oauth-session-pkce.test.ts,129,as any,"    (service as any).exchangeForLongLivedToken = mock(async () => ({"
src/tests/oauth-session-pkce.test.ts,137,as any,"    (global as any).fetch = mock(async (url: any, options: any) => {"
src/tests/oauth-session-pkce.test.ts,143,as any,"        } as any;"
src/tests/oauth-session-pkce.test.ts,145,as any,"      return { ok: false, text: async () => '', status: 500 } as any;"
src/services/notification-service.ts,13,: any,"  content: any;"
src/services/ai.test.ts,98,as any,"    (OpenAI as jest.MockedClass<typeof OpenAI>).mockImplementation(() => mockOpenAI as any);"
src/services/ai.test.ts,601,as any,"        const response = (aiService as any).getFallbackResponse(sampleContext);"
src/services/ai.test.ts,610,as any,"      const response = (aiService as any).getFallbackResponse(sampleContext);"
src/services/ai.test.ts,634,as any,"      (require('./ai.js') as any).aiServiceInstance = null;"
src/services/instagram-comments-manager.ts,557,: any,"        topCommentingUsers: topUsers.map((user: any) => ({"
src/services/instagram-comments-manager.ts,718,: any,"  private shouldInviteToDM(comment: CommentInteraction, analysis: any): boolean {"
src/services/instagram-comments-manager.ts,787,: any,"    analysis: any,"
src/services/conversation-ai-orchestrator.ts,184,: any,"    } catch (error: any) {"
src/services/conversation-ai-orchestrator.ts,245,: any,"    } catch (error: any) {"
src/services/conversation-ai-orchestrator.ts,268,as any,"      const sql = this.db.getSQL() as any;"
src/services/conversation-ai-orchestrator.ts,305,: any,"    } catch (error: any) {"
src/services/conversation-ai-orchestrator.ts,324,as any,"      const sql = this.db.getSQL() as any;"
src/services/conversation-ai-orchestrator.ts,387,: any,"    } catch (error: any) {"
src/services/conversation-ai-orchestrator.ts,634,: any,"  private analyzeResponsePatterns(interactions: InteractionRow[]): any {"
src/services/conversation-ai-orchestrator.ts,673,as any,"      const sql = this.db.getSQL() as any;"
src/services/conversation-ai-orchestrator.ts,701,: any,"    } catch (error: any) {"
src/services/conversation-ai-orchestrator.ts,724,as any,"            stage: (context as any).stage,"
src/services/conversation-ai-orchestrator.ts,734,as any,"            message: baseMsg, messageAr: baseMsg, intent: 'SUPPORT', stage: (context as any).stage,"
src/services/conversation-ai-orchestrator.ts,753,: any,"  responsePatterns: any;"
src/services/logger.test.ts,23,: any,"  let originalStdout: any;"
src/services/logger.test.ts,24,: any,"  let originalStderr: any;"
src/services/logger.test.ts,25,: any,"  let originalEnv: any;"
src/services/logger.test.ts,498,as any,"      logger.info(null as any);"
src/services/logger.test.ts,499,as any,"      logger.info(undefined as any);"
src/services/logger.test.ts,505,: any,"      const circular: any = { name: 'test' };"
src/services/logger.test.ts,555,: any,"        const result: any = {};"
src/tests/instagram-webhook.test.ts,6,: any,"  let handler: any;"
src/tests/instagram-webhook.test.ts,7,: any,"  let logger: any;"
src/tests/instagram-webhook.test.ts,16,as any,"    (globalThis as any).createLogger = () => logger;"
src/tests/instagram-webhook.test.ts,30,as any,"    (handler as any).findOrCreateConversation = mock(async () => ({ id: 'conv1', isNew: false }));"
src/tests/instagram-webhook.test.ts,31,as any,"    (handler as any).storeIncomingMessage = mock(async () => {});"
src/tests/instagram-webhook.test.ts,32,as any,"    (handler as any).generateAIResponse = mock(async () => {});"
src/tests/instagram-webhook.test.ts,37,as any,"    delete (globalThis as any).createLogger;"
src/tests/instagram-webhook.test.ts,49,as any,"    const ret = await (handler as any).processMessagingEvent(event, 'merchant1', result);"
src/tests/instagram-webhook.test.ts,57,as any,"    (handler as any).findOrCreateConversation = mock(async () => null);"
src/tests/instagram-webhook.test.ts,66,as any,"    await expect((handler as any).processMessagingEvent(event, 'merchant1', result)).rejects.toThrow('Failed to create conversation');"
src/tests/instagram-webhook.test.ts,74,: any,"  let handler: any;"
src/tests/instagram-webhook.test.ts,75,: any,"  let logger: any;"
src/tests/instagram-webhook.test.ts,76,: any,"  let client: any;"
src/tests/instagram-webhook.test.ts,90,as any,"    (globalThis as any).createLogger = () => logger;"
src/tests/instagram-webhook.test.ts,107,as any,"    delete (globalThis as any).createLogger;"
src/tests/instagram-webhook.test.ts,111,as any,"    await (handler as any).inviteCommentToDM('merchant1', 'comment1', 'user1');"
src/tests/instagram-webhook.test.ts,118,as any,"    await (handler as any).inviteCommentToDM('merchant1', 'comment1', 'user1');"
src/services/ai.ts,53,: any,"  cart: any[];"
src/services/ai.ts,80,: any,"  workingHours: any;"
src/services/ai.ts,82,: any,"  deliveryFees: any;"
src/services/ai.ts,83,: any,"  autoResponses: any;"
src/services/ai.ts,88,: any,"  private encryptionService: any;"
src/services/ai.ts,91,: any,"  private logger: any;"
src/services/ai.ts,92,: any,"  private db: any;"
src/services/ai.ts,108,: any,"    void this.initializeEncryptionService().catch((err: any) => {"
src/services/ai.ts,117,: any,"    } catch (error: any) {"
src/services/ai.ts,124,: any,"  private validateAIResponse(payload: any): payload is AIResponse {"
src/services/ai.ts,149,: any,"      } catch (e: any) {"
src/services/ai.ts,212,as any,"      const response = (completion as any).choices?.[0]?.message?.content;"
src/services/ai.ts,219,: any,"      let aiResponse: any;"
src/services/ai.ts,241,: any,"    } catch (error: any) {"
src/services/ai.ts,275,as any,"      const response = (completion as any).choices?.[0]?.message?.content;"
src/services/ai.ts,277,: any,"    } catch (error: any) {"
src/services/ai.ts,314,as any,"      const response = (completion as any).choices?.[0]?.message?.content;"
src/services/ai.ts,318,: any,"    } catch (error: any) {"
src/services/ai.ts,342,: any,"    } catch (error: any) {"
src/services/ai.ts,443,: any,"    products: any[]"
src/services/ai.ts,504,: any,"      return products.map((p: any) =>"
src/services/ai.ts,568,: any,"    } catch (error: any) {"
src/tests/media-id-uniqueness.test.ts,11,as any,"    (handler as any).mediaManager = {"
src/tests/media-id-uniqueness.test.ts,12,: any,"      processIncomingMedia: async (media: any) => {"
src/tests/media-id-uniqueness.test.ts,26,as any,"      await (handler as any).processMediaAttachment("
src/services/CircuitBreaker.test.ts,25,: any,"  let mockService: any;"
src/services/CircuitBreaker.test.ts,211,: any,"      } catch (error: any) {"
src/services/CircuitBreaker.test.ts,487,as any,"      await expect(circuitBreaker.execute(null as any))"
src/services/CircuitBreaker.test.ts,490,as any,"      await expect(circuitBreaker.execute(undefined as any))"
src/services/CircuitBreaker.test.ts,495,as any,"      await expect(circuitBreaker.execute('not a function' as any))"
src/services/CircuitBreaker.test.ts,498,as any,"      await expect(circuitBreaker.execute(123 as any))"
src/services/CircuitBreaker.test.ts,505,as any,"      (originalError as any).statusCode = 500;"
src/services/CircuitBreaker.test.ts,514,: any,"      } catch (error: any) {"
src/services/instagram-api.test.ts,65,: any,"  let mockLogger: any;"
src/services/instagram-api.ts,105,: any,"  private encryptionService: any;"
src/services/instagram-api.ts,107,: any,"  private rateLimiter: any;"
src/services/instagram-api.ts,108,: any,"  private logger: any;"
src/services/instagram-api.ts,129,: any,"    } catch (error: any) {"
src/services/instagram-api.ts,224,as any,"        (e as any).status = res.status;"
src/services/instagram-api.ts,256,: any,"      const result: any = await response.json();"
src/services/instagram-api.ts,265,as any,"      const status = typeof (error as any)?.status === 'number'"
src/services/instagram-api.ts,266,as any,"        ? (error as any).status"
src/services/instagram-api.ts,268,as any,"      const message = typeof (error as any)?.message === 'string'"
src/services/instagram-api.ts,269,as any,"        ? (error as any).message"
src/services/instagram-api.ts,334,: any,"    const data: any = await response.json().catch(() => ({}));"
src/services/instagram-api.ts,370,: any,"      const result: any = await this.graphRequest<any>("
src/services/instagram-api.ts,478,: any,"      const result: any = await this.graphRequest<any>("
src/services/instagram-api.ts,621,: any,"  private buildMessagePayload(request: SendMessageRequest): any {"
src/services/instagram-api.ts,682,: any,"  private encryptionService: any;"
src/services/instagram-api.ts,684,: any,"  private logger: any;"
src/services/instagram-api.ts,699,: any,"    } catch (error: any) {"
src/services/instagram-api.ts,823,: any,"      const result: any[] = await sql`"
src/services/instagram-api.ts,851,: any,"      const result: any[] = await query(db.getPool(), `"
src/services/instagram-ai.test.ts,109,as any,"    (OpenAI as jest.MockedClass<typeof OpenAI>).mockImplementation(() => mockOpenAI as any);"
src/services/instagram-ai.test.ts,658,as any,"      const hashtags = await (instagramAIService as any).generateRelevantHashtags("
src/services/instagram-ai.test.ts,678,as any,"      const hashtags = await (instagramAIService as any).generateRelevantHashtags("
src/services/instagram-ai.test.ts,689,as any,"      const hashtags = await (instagramAIService as any).generateRelevantHashtags("
src/services/instagram-ai.test.ts,700,as any,"      const storyReplyFallback = (instagramAIService as any).getContextualFallback("
src/services/instagram-ai.test.ts,705,as any,"      const dmFallback = (instagramAIService as any).getContextualFallback("
src/services/instagram-ai.test.ts,715,as any,"      const rateLimitFallback = (instagramAIService as any).getContextualFallback("
src/services/instagram-ai.test.ts,720,as any,"      const networkErrorFallback = (instagramAIService as any).getContextualFallback("
src/services/instagram-ai.test.ts,730,as any,"      const storyFallback = (instagramAIService as any).getContextualFallback("
src/services/instagram-ai.test.ts,735,as any,"      const dmFallback = (instagramAIService as any).getContextualFallback("
src/services/instagram-ai.test.ts,825,as any,"      const results = await (instagramAIService as any).processCommentBatch(operations);"
src/services/instagram-ai.test.ts,837,as any,"      const results = await (instagramAIService as any).processCommentBatch(operations);"
src/services/instagram-ai.test.ts,854,as any,"      const results = await (instagramAIService as any).getProductsForShowcase("
src/services/instagram-ai.test.ts,875,as any,"      (require('./instagram-ai.js') as any).instagramAIServiceInstance = null;"
src/services/instagram-ai.test.ts,886,as any,"        interactionType: 'unknown_type' as any"
src/services/instagram-ai.test.ts,889,as any,"      const fallback = (instagramAIService as any).getContextualFallback("
src/services/instagram-ai.ts,49,: any,"    [k: string]: any;"
src/services/instagram-ai.ts,96,as any,"        const config = result[0].ai_config as any;"
src/services/instagram-ai.ts,271,: any,"    } catch (error: any) {"
src/services/instagram-ai.ts,315,: any,"    } catch (error: any) {"
src/services/instagram-ai.ts,355,: any,"    } catch (error: any) {"
src/services/instagram-ai.ts,403,: any,"    } catch (error: any) {"
src/services/instagram-ai.ts,456,: any,"    } catch (error: any) {"
src/services/instagram-ai.ts,564,: any,"    storyContext: any,"
src/services/instagram-ai.ts,595,: any,"    postContext: any,"
src/services/instagram-ai.ts,625,: any,"    products: any[],"
src/services/instagram-ai.ts,747,: any,"      let allProducts: any[] = [];"
src/services/instagram-comments-manager.test.ts,19,: any,"const mockSQL = mock((strings: TemplateStringsArray, ...values: any[]) => {"
src/services/instagram-comments-manager.test.ts,106,: any,"  hashMerchantAndBody: mock((merchantId: string, body: any) => `hash-${merchantId}-${JSON.stringify(body).length}`)"
src/services/instagram-stories-manager.ts,394,as any,"      const sql = this.db.getSQL() as any;"
src/services/instagram-stories-manager.ts,480,as any,"      const sql = this.db.getSQL() as any;"
src/services/instagram-stories-manager.ts,518,as any,"      const sql = this.db.getSQL() as any;"
src/services/instagram-stories-manager.ts,555,as any,"      const sql = this.db.getSQL() as any;"
src/services/instagram-stories-manager.ts,601,as any,"      const sql = this.db.getSQL() as any;"
src/services/instagram-stories-manager.ts,662,as any,"      const sql = this.db.getSQL() as any;"
src/services/instagram-stories-manager.ts,692,: any,"        let session: any = {};"
src/services/instagram-stories-manager.ts,714,as any,"        interactionType: (['story_reply','story_mention','story_reaction'] as const).includes(interaction.type as any)"
src/services/instagram-stories-manager.ts,811,as any,"      const sql = this.db.getSQL() as any;"
src/services/instagram-stories-manager.ts,864,as any,"      const sql = this.db.getSQL() as any;"
src/services/instagram-stories-manager.ts,911,as any,"      const sql = this.db.getSQL() as any;"
src/services/instagram-setup.ts,36,: any,"  details?: any;"
src/services/instagram-setup.ts,218,as any,"        const grantedPerms = (permissions as any).data?.map((p: any) => p.permission) ?? [];"
src/services/instagram-setup.ts,364,: any,"    healthStatus?: any;"
src/services/instagram-webhook.ts,507,as any,"          postType: event.value.media.media_product_type as any,"
src/services/instagram-webhook.ts,785,: any,"      let session: any = {};"
src/services/instagram-webhook.ts,1187,: any,"    attachment: any,"
src/services/instagram-webhook.ts,1249,: any,"    const typeMapping: { [key: string]: any } = {"
src/services/instagram-webhook.ts,1280,: any,"    attachment: any,"
src/services/instagram-testing-orchestrator.ts,196,: any,"    context?: any"
src/services/instagram-testing-orchestrator.ts,289,: any,"      const results: any[] = [];"
src/services/instagram-testing-orchestrator.ts,717,: any,"    context?: any"
src/services/instagram-testing-orchestrator.ts,718,: any,"  ): Promise<{ success: boolean; output?: any; error?: string }> {"
src/services/instagram-testing-orchestrator.ts,720,: any,"      let result: any;"
src/services/instagram-testing-orchestrator.ts,824,: any,"  private validateStepResult(result: any, validations: string[]): boolean {"
src/services/instagram-testing-orchestrator.ts,859,: any,"    options: any"
src/services/instagram-testing-orchestrator.ts,982,: any,"  private shouldRunSuite(suite: TestSuite, options: any): boolean {"
src/services/instagram-testing-orchestrator.ts,986,as any,"        suiteCategories.includes(cat as any)"
src/services/instagram-testing-orchestrator.ts,1009,: any,"    instagramClient: any,"
src/services/instagram-testing-orchestrator.ts,1089,: any,"  private async checkRateLimits(instagramClient: any): Promise<{"
src/services/instagram-testing-orchestrator.ts,1122,: any,"    endpointTests: any[],"
src/services/instagram-testing-orchestrator.ts,1123,: any,"    webhookValidation: any,"
src/services/instagram-testing-orchestrator.ts,1124,: any,"    rateLimitStatus: any"
src/services/instagram-testing-orchestrator.ts,1156,: any,"    const results: any[] = [];"
src/services/instagram-testing-orchestrator.ts,1190,: any,"  private generatePerformanceRecommendations(results: any[]): string[] {"
src/services/instagram-testing-orchestrator.ts,1213,: any,"  private async storePerformanceTestResult(report: any, merchantId: string): Promise<void> {"
src/services/instagram-testing-orchestrator.ts,1252,: any,"  private async storeValidationResult(result: any, merchantId: string): Promise<void> {"

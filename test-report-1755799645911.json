{
  "timestamp": "2025-08-21T18:07:25.909Z",
  "summary": {
    "totalFiles": 41,
    "passed": 14,
    "failed": 27,
    "skipped": 0,
    "totalDuration": 39228,
    "overallCoverage": 0
  },
  "results": [
    {
      "file": "src/middleware/enhanced-security.test.ts",
      "status": "failed",
      "duration": 738,
      "errors": [
        "Error: \nsrc/middleware/enhanced-security.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n24 |   setupGlobalErrorHandlers,\n25 |   generateCSPNonce\n26 | } from './enhanced-security.js';\n27 | \n28 | // Mock dependencies\n29 | jest.mock('../config/environment.js', () => ({\n          ^\nTypeError: jest.mock is not a function. (In 'jest.mock(\"../config/environment.js\", () => ({\n  getConfig: jest.fn(() => ({\n    environment: \"test\",\n    security: {\n      corsOrigins: [\"https://test.example.com\", \"https://ai-instgram.onrender.com\"]\n    },\n    instagram: {\n      metaAppSecret: \"test-secret-key\"\n    }\n  }))\n}))', 'jest.mock' is undefined)\n      at /mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/middleware/enhanced-security.test.ts:29:6\n      at loadAndEvaluateModule (2:1)\n-------------------------------\n\n\n 0 pass\n 1 fail\n 1 error\nRan 1 test across 1 file. [582.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/middleware/security.test.ts",
      "status": "failed",
      "duration": 2664,
      "errors": [
        "Error: \nsrc/middleware/security.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n25 |   getClientIP,\n26 |   rateLimiters\n27 | } from './security.js';\n28 | \n29 | // Mock dependencies\n30 | jest.mock('../services/message-window.js', () => ({\n          ^\nTypeError: jest.mock is not a function. (In 'jest.mock(\"../services/message-window.js\", () => ({\n  getMessageWindowService: jest.fn(() => ({\n    checkCanSendMessage: jest.fn(() => Promise.resolve({\n      canSendMessage: !0,\n      windowExpiresAt: new Date(Date.now() + 86400000)\n    }))\n  }))\n}))', 'jest.mock' is undefined)\n      at /mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/middleware/security.test.ts:30:6\n-------------------------------\n\n\n 0 pass\n 1 fail\n 1 error\nRan 1 test across 1 file. [2.51s]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/services/ai.test.ts",
      "status": "failed",
      "duration": 491,
      "errors": [
        "Error: \nsrc/services/ai.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n17 |   type CustomerProfile,\n18 |   type MerchantSettings\n19 | } from './ai.js';\n20 | \n21 | // Mock dependencies\n22 | jest.mock('openai');\n          ^\nTypeError: jest.mock is not a function. (In 'jest.mock(\"openai\")', 'jest.mock' is undefined)\n      at /mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/ai.test.ts:22:6\n      at loadAndEvaluateModule (2:1)\n-------------------------------\n\n\n 0 pass\n 1 fail\n 1 error\nRan 1 test across 1 file. [339.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/services/instagram-ai.test.ts",
      "status": "failed",
      "duration": 439,
      "errors": [
        "Error: \nsrc/services/instagram-ai.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n15 |   type InstagramContext,\n16 |   type MediaRecommendation\n17 | } from './instagram-ai.js';\n18 | \n19 | // Mock dependencies\n20 | jest.mock('openai');\n          ^\nTypeError: jest.mock is not a function. (In 'jest.mock(\"openai\")', 'jest.mock' is undefined)\n      at /mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-ai.test.ts:20:6\n      at loadAndEvaluateModule (2:1)\n-------------------------------\n\n\n 0 pass\n 1 fail\n 1 error\nRan 1 test across 1 file. [295.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/services/instagram-api.test.ts",
      "status": "failed",
      "duration": 1564,
      "errors": [
        "Error: \nsrc/services/instagram-api.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n14 |   type InstagramMessage,\n15 |   type InstagramProfile\n16 | } from './instagram-api.js';\n17 | \n18 | // Mock dependencies\n19 | jest.mock('./encryption.js', () => ({\n          ^\nTypeError: jest.mock is not a function. (In 'jest.mock(\"./encryption.js\", () => ({\n  getEncryptionService: jest.fn(() => ({\n    encrypt: jest.fn((data) => `encrypted_${data}`),\n    decrypt: jest.fn((data) => data.replace(\"encrypted_\", \"\"))\n  }))\n}))', 'jest.mock' is undefined)\n      at /mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-api.test.ts:19:6\n      at loadAndEvaluateModule (2:1)\n-------------------------------\n\n\n 0 pass\n 1 fail\n 1 error\nRan 1 test across 1 file. [1290.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/services/instagram-comments-manager.test.ts",
      "status": "failed",
      "duration": 2270,
      "errors": [
        "Error: \nsrc/services/instagram-comments-manager.test.ts:\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Singleton Pattern - نمط الكائن الواحد > should return same instance when called multiple times [4.90ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Singleton Pattern - نمط الكائن الواحد > should initialize with proper dependencies [0.06ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n185 | \n186 |       const result = await commentsManager.processComment(sampleComment, testMerchantId);\n187 | \n188 |       expect(result.success).toBe(true);\n189 |       expect(result.responseGenerated).toBe(true);\n190 |       expect(result.actionTaken).toBe('replied');\n                                       ^\nerror: expect(received).toBe(expected)\n\nExpected: \"replied\"\nReceived: \"dm_invited\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:190:34)\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Comment Processing - معالجة التعليقات > should process comment successfully with reply response [9.11ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Processing - معالجة التعليقات > should handle sales inquiry with DM invitation [3.96ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Processing - معالجة التعليقات > should handle complaint with DM invitation [3.83ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Processing - معالجة التعليقات > should handle spam comments by not responding [4.43ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Processing - معالجة التعليقات > should handle positive engagement with appreciation [3.87ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Processing - معالجة التعليقات > should implement idempotency for duplicate comment processing [4.73ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n286 |         new Error('Credentials not found')\n287 |       );\n288 | \n289 |       const result = await commentsManager.processComment(sampleComment, testMerchantId);\n290 | \n291 |       expect(result.success).toBe(false);\n                                   ^\nerror: expect(received).toBe(expected)\n\nExpected: false\nReceived: true\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:291:30)\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Comment Processing - معالجة التعليقات > should handle processing errors gracefully [6.59ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Analysis - تحليل التعليقات > should analyze comment sentiment correctly [0.29ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Analysis - تحليل التعليقات > should detect sales inquiry keywords [0.10ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Analysis - تحليل التعليقات > should detect complaint keywords [0.09ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Analysis - تحليل التعليقات > should fallback to basic analysis when AI fails [0.13ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Analysis - تحليل التعليقات > should store analysis results in database [0.09ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Response Generation - توليد ردود التعليقات > should generate appropriate response for sales inquiry [0.07ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Response Generation - توليد ردود التعليقات > should invite to DM for detailed sales inquiries [0.07ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Response Generation - توليد ردود التعليقات > should generate complaint response with DM invitation [0.05ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Response Generation - توليد ردود التعليقات > should generate positive engagement response [0.05ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Response Generation - توليد ردود التعليقات > should not respond to spam comments [0.04ms]\n471 |         sampleComment,\n472 |         analysis,\n473 |         testMerchantId\n474 |       );\n475 | \n476 |       expect(response.type).toBe('none');\n                                  ^\nerror: expect(received).toBe(expected)\n\nExpected: \"none\"\nReceived: \"dm_invite\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:476:29)\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Comment Response Generation - توليد ردود التعليقات > should handle response generation errors [3.27ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Comment Analytics - تحليلات التعليقات > should retrieve comprehensive comment analytics [0.73ms]\n503 |       };\n504 | \n505 |       const analytics = await commentsManager.getCommentAnalytics(testMerchantId, dateRange);\n506 | \n507 |       expect(analytics).toBeDefined();\n508 |       expect(mockSQL).toHaveBeenCalledWith(\n                            ^\nerror: expect(received).toHaveBeenCalledWith(...expected)\n\n    Expected: [\n  ExpectArrayContaining {}, Any<String>, 2024-01-01T00:00:00.000Z, 2024-01-31T00:00:00.000Z\n]\n    Received:\n              1: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"هذا المنتج رائع! كم سعره؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n              2: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n              3: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n              4: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"أهلاً @test_user! 🛍️ راح أرسلك رسالة خاصة بكل التفاصيل والأسعار الخاصة ✨\"\n]\n              5: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n              6: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"هذا المنتج رائع! كم سعره؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n              7: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"أريد أطلب من هذا المنتج، كم سعره وكيف أطلب؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n              8: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 50, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"neutral\\\",\\\"sentimentScore\\\":50,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n              9: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             10: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"أهلاً @test_user! 🛍️ راح أرسلك رسالة خاصة بكل التفاصيل والأسعار الخاصة ✨\"\n]\n             11: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             12: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"أريد أطلب من هذا المنتج، كم سعره وكيف أطلب؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n             13: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"عندي مشكلة مع الطلب، ماوصلني شي!\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             14: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             15: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"مرحباً @test_user 🌹 نعتذر عن أي إزعاج! راسلنا خاص عشان نحل المشكلة بأسرع وقت ممكن 💙\"\n]\n             16: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             17: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"Click this link for free followers! spam promotional\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             18: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 50, false, false, false, \"low\", \"{\\\"sentiment\\\":\\\"neutral\\\",\\\"sentimentScore\\\":50,\\\"isSalesInquiry\\\":false,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"low\\\",\\\"recommendedAction\\\":\\\"like\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             19: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             20: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"like\", \"\"\n]\n             21: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             22: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"حلو جداً! منتجاتكم رائعة 😍\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             23: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             24: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             25: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"أهلاً @test_user! 🛍️ راح أرسلك رسالة خاصة بكل التفاصيل والأسعار الخاصة ✨\"\n]\n             26: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             27: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"حلو جداً! منتجاتكم رائعة 😍\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n             28: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"هذا المنتج رائع! كم سعره؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             29: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             30: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             31: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"أهلاً @test_user! 🛍️ راح أرسلك رسالة خاصة بكل التفاصيل والأسعار الخاصة ✨\"\n]\n             32: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             33: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"هذا المنتج رائع! كم سعره؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n             34: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"هذا المنتج رائع! كم سعره؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             35: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             36: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             37: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             38: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"هذا المنتج رائع! كم سعره؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n             39: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             40: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 50, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"neutral\\\",\\\"sentimentScore\\\":50,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             41: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 25, false, true, false, \"high\", \"{\\\"sentiment\\\":\\\"negative\\\",\\\"sentimentScore\\\":25,\\\"isSalesInquiry\\\":false,\\\"isComplaint\\\":true,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"high\\\",\\\"recommendedAction\\\":\\\"dm_invite\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             42: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             43: [\n  [ \"AND created_at >= NOW() - INTERVAL '30 days'\", raw: [ \"AND created_at >= NOW() - INTERVAL '30 days'\" ] ]\n]\n             44: [\n  [ \"\\n        SELECT \\n          COUNT(*) as total_comments,\\n          AVG(sentiment_score) as avg_sentiment,\\n          COUNT(CASE WHEN sentiment_score > 60 THEN 1 END) as positive,\\n          COUNT(CASE WHEN sentiment_score BETWEEN 30 AND 60 THEN 1 END) as neutral,\\n          COUNT(CASE WHEN sentiment_score < 30 THEN 1 END) as negative,\\n          COUNT(CASE WHEN is_sales_inquiry = true THEN 1 END) as sales_inquiries\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n    \"::uuid\\n        \", \"\\n      \", raw: [ \"\\n        SELECT \\n          COUNT(*) as total_comments,\\n          AVG(sentiment_score) as avg_sentiment,\\n          COUNT(CASE WHEN sentiment_score > 60 THEN 1 END) as positive,\\n          COUNT(CASE WHEN sentiment_score BETWEEN 30 AND 60 THEN 1 END) as neutral,\\n          COUNT(CASE WHEN sentiment_score < 30 THEN 1 END) as negative,\\n          COUNT(CASE WHEN is_sales_inquiry = true THEN 1 END) as sales_inquiries\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n      \"::uuid\\n        \", \"\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             45: [\n  [ \"\\n        SELECT \\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          AVG(EXTRACT(EPOCH FROM (cr.created_at - ci.created_at))/60) as avg_response_time\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n    \"::uuid\\n        \", \"\\n      \", raw: [ \"\\n        SELECT \\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          AVG(EXTRACT(EPOCH FROM (cr.created_at - ci.created_at))/60) as avg_response_time\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n      \"::uuid\\n        \", \"\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             46: [\n  [ \"\\n        SELECT \\n          username,\\n          COUNT(*) as comment_count,\\n          AVG(sentiment_score) as engagement_score\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n    \"::uuid\\n        \", \"\\n        AND username IS NOT NULL\\n        GROUP BY username\\n        ORDER BY comment_count DESC\\n        LIMIT 10\\n      \",\n    raw: [ \"\\n        SELECT \\n          username,\\n          COUNT(*) as comment_count,\\n          AVG(sentiment_score) as engagement_score\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n      \"::uuid\\n        \", \"\\n        AND username IS NOT NULL\\n        GROUP BY username\\n        ORDER BY comment_count DESC\\n        LIMIT 10\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             47: [\n  [ \"\\n        SELECT \\n          COALESCE((metadata->>'postType')::text, 'unknown') as post_type,\\n          COUNT(*) as comments,\\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          COUNT(CASE WHEN ci.is_sales_inquiry = true THEN 1 END) as conversions\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n    \"::uuid\\n        \", \"\\n        GROUP BY COALESCE((metadata->>'postType')::text, 'unknown')\\n      \",\n    raw: [ \"\\n        SELECT \\n          COALESCE((metadata->>'postType')::text, 'unknown') as post_type,\\n          COUNT(*) as comments,\\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          COUNT(CASE WHEN ci.is_sales_inquiry = true THEN 1 END) as conversions\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n      \"::uuid\\n        \", \"\\n        GROUP BY COALESCE((metadata->>'postType')::text, 'unknown')\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             48: [\n  [ \"AND created_at BETWEEN \", \" AND \", \"\", raw: [ \"AND created_at BETWEEN \", \" AND \", \"\" ] ], 2024-01-01T00:00:00.000Z, 2024-01-31T00:00:00.000Z\n]\n             49: [\n  [ \"\\n        SELECT \\n          COUNT(*) as total_comments,\\n          AVG(sentiment_score) as avg_sentiment,\\n          COUNT(CASE WHEN sentiment_score > 60 THEN 1 END) as positive,\\n          COUNT(CASE WHEN sentiment_score BETWEEN 30 AND 60 THEN 1 END) as neutral,\\n          COUNT(CASE WHEN sentiment_score < 30 THEN 1 END) as negative,\\n          COUNT(CASE WHEN is_sales_inquiry = true THEN 1 END) as sales_inquiries\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n    \"::uuid\\n        \", \"\\n      \", raw: [ \"\\n        SELECT \\n          COUNT(*) as total_comments,\\n          AVG(sentiment_score) as avg_sentiment,\\n          COUNT(CASE WHEN sentiment_score > 60 THEN 1 END) as positive,\\n          COUNT(CASE WHEN sentiment_score BETWEEN 30 AND 60 THEN 1 END) as neutral,\\n          COUNT(CASE WHEN sentiment_score < 30 THEN 1 END) as negative,\\n          COUNT(CASE WHEN is_sales_inquiry = true THEN 1 END) as sales_inquiries\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n      \"::uuid\\n        \", \"\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             50: [\n  [ \"\\n        SELECT \\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          AVG(EXTRACT(EPOCH FROM (cr.created_at - ci.created_at))/60) as avg_response_time\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n    \"::uuid\\n        \", \"\\n      \", raw: [ \"\\n        SELECT \\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          AVG(EXTRACT(EPOCH FROM (cr.created_at - ci.created_at))/60) as avg_response_time\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n      \"::uuid\\n        \", \"\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             51: [\n  [ \"\\n        SELECT \\n          username,\\n          COUNT(*) as comment_count,\\n          AVG(sentiment_score) as engagement_score\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n    \"::uuid\\n        \", \"\\n        AND username IS NOT NULL\\n        GROUP BY username\\n        ORDER BY comment_count DESC\\n        LIMIT 10\\n      \",\n    raw: [ \"\\n        SELECT \\n          username,\\n          COUNT(*) as comment_count,\\n          AVG(sentiment_score) as engagement_score\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n      \"::uuid\\n        \", \"\\n        AND username IS NOT NULL\\n        GROUP BY username\\n        ORDER BY comment_count DESC\\n        LIMIT 10\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             52: [\n  [ \"\\n        SELECT \\n          COALESCE((metadata->>'postType')::text, 'unknown') as post_type,\\n          COUNT(*) as comments,\\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          COUNT(CASE WHEN ci.is_sales_inquiry = true THEN 1 END) as conversions\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n    \"::uuid\\n        \", \"\\n        GROUP BY COALESCE((metadata->>'postType')::text, 'unknown')\\n      \",\n    raw: [ \"\\n        SELECT \\n          COALESCE((metadata->>'postType')::text, 'unknown') as post_type,\\n          COUNT(*) as comments,\\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          COUNT(CASE WHEN ci.is_sales_inquiry = true THEN 1 END) as conversions\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n      \"::uuid\\n        \", \"\\n        GROUP BY COALESCE((metadata->>'postType')::text, 'unknown')\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n\n    Number of calls: 52\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:508:23)\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Comment Analytics - تحليلات التعليقات > should filter analytics by date range [4.59ms]\n527 |         avg_response_time: 12.5\n528 |       }]);\n529 | \n530 |       const analytics = await commentsManager.getCommentAnalytics(testMerchantId);\n531 | \n532 |       expect(analytics.totalComments).toBe(100);\n                                            ^\nerror: expect(received).toBe(expected)\n\nExpected: 100\nReceived: 0\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:532:39)\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Comment Analytics - تحليلات التعليقات > should calculate response rate correctly [3.29ms]\n533 |       expect(analytics.responseRate).toBe(60);\n534 |       expect(analytics.averageResponseTime).toBe(12.5);\n535 |     });\n536 | \n537 |     test('should handle analytics errors gracefully', async () => {\n538 |       mockSQL.mockRejectedValueOnce(new Error('Database error'));\n                                          ^\nerror: Database error\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:538:37)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:537:55)\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Comment Analytics - تحليلات التعليقات > should handle analytics errors gracefully [3.22ms]\n\n# Unhandled error between tests\n-------------------------------\n537 |     test('should handle analytics errors gracefully', async () => {\n538 |       mockSQL.mockRejectedValueOnce(new Error('Database error'));\n539 | \n540 |       await expect(\n541 |         commentsManager.getCommentAnalytics(testMerchantId)\n542 |       ).rejects.toThrow('Database error');\n                      ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:542:17)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:537:55)\n-------------------------------\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Moderation Rules - قواعد الإشراف > should create moderation rule successfully [0.64ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Moderation Rules - قواعد الإشراف > should handle rule creation errors [0.19ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n609 |       }]);\n610 | \n611 |       const result = await commentsManager.processComment(spamComment, testMerchantId);\n612 | \n613 |       expect(result.success).toBe(true);\n614 |       expect(result.actionTaken).toBe('hidden');\n                                       ^\nerror: expect(received).toBe(expected)\n\nExpected: \"hidden\"\nReceived: \"liked\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:614:34)\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Moderation Rules - قواعد الإشراف > should apply moderation rules during comment processing [5.67ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n634 |       await commentsManager.processComment(sampleComment, testMerchantId);\n635 |       expect(mockInstagramClient.loadMerchantCredentials).toHaveBeenCalledTimes(1);\n636 | \n637 |       // Second call should use cached credentials\n638 |       await commentsManager.processComment(sampleComment, testMerchantId);\n639 |       expect(mockInstagramClient.loadMerchantCredentials).toHaveBeenCalledTimes(1);\n                                                                ^\nerror: expect(received).toHaveBeenCalledTimes(expected)\n\nExpected number of calls: 1\nReceived number of calls: 2\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:639:59)\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Credentials Management - إدارة أوراق الاعتماد > should cache and reuse valid credentials [9.25ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Credentials Management - إدارة أوراق الاعتماد > should refresh expired credentials [3.45ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n667 |     test('should handle missing credentials error', async () => {\n668 |       mockInstagramClient.loadMerchantCredentials.mockResolvedValue(null);\n669 | \n670 |       const result = await commentsManager.processComment(sampleComment, testMerchantId);\n671 | \n672 |       expect(result.success).toBe(false);\n                                   ^\nerror: expect(received).toBe(expected)\n\nExpected: false\nReceived: true\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:672:30)\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Credentials Management - إدارة أوراق الاعتماد > should handle missing credentials error [7.81ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Credentials Management - إدارة أوراق الاعتماد > should clear credentials cache when requested [5.21ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Database Operations - عمليات قاعدة البيانات > should store comment in database with proper fields [5.34ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Database Operations - عمليات قاعدة البيانات > should update analytics after comment processing [4.03ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n719 |         content: 'أريد أشتري هذا المنتج'\n720 |       };\n721 | \n722 |       await commentsManager.processComment(salesComment, testMerchantId);\n723 | \n724 |       expect(mockSQL).toHaveBeenCalledWith(\n                            ^\nerror: expect(received).toHaveBeenCalledWith(...expected)\n\n    Expected: [\n  ExpectArrayContaining {}, \"merchant-123\", \"user-789\", \"instagram\", \"COMMENT_INQUIRY\", \"NEW\", StringContaining \"commentId\"\n]\n    Received:\n              1: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"هذا المنتج رائع! كم سعره؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n              2: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n              3: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n              4: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"أهلاً @test_user! 🛍️ راح أرسلك رسالة خاصة بكل التفاصيل والأسعار الخاصة ✨\"\n]\n              5: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n              6: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"هذا المنتج رائع! كم سعره؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n              7: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"أريد أطلب من هذا المنتج، كم سعره وكيف أطلب؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n              8: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 50, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"neutral\\\",\\\"sentimentScore\\\":50,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n              9: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             10: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"أهلاً @test_user! 🛍️ راح أرسلك رسالة خاصة بكل التفاصيل والأسعار الخاصة ✨\"\n]\n             11: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             12: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"أريد أطلب من هذا المنتج، كم سعره وكيف أطلب؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n             13: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"عندي مشكلة مع الطلب، ماوصلني شي!\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             14: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             15: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"مرحباً @test_user 🌹 نعتذر عن أي إزعاج! راسلنا خاص عشان نحل المشكلة بأسرع وقت ممكن 💙\"\n]\n             16: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             17: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"Click this link for free followers! spam promotional\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             18: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 50, false, false, false, \"low\", \"{\\\"sentiment\\\":\\\"neutral\\\",\\\"sentimentScore\\\":50,\\\"isSalesInquiry\\\":false,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"low\\\",\\\"recommendedAction\\\":\\\"like\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             19: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             20: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"like\", \"\"\n]\n             21: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             22: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"حلو جداً! منتجاتكم رائعة 😍\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             23: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             24: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             25: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"أهلاً @test_user! 🛍️ راح أرسلك رسالة خاصة بكل التفاصيل والأسعار الخاصة ✨\"\n]\n             26: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             27: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"حلو جداً! منتجاتكم رائعة 😍\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n             28: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"هذا المنتج رائع! كم سعره؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             29: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             30: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             31: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"أهلاً @test_user! 🛍️ راح أرسلك رسالة خاصة بكل التفاصيل والأسعار الخاصة ✨\"\n]\n             32: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             33: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"هذا المنتج رائع! كم سعره؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n             34: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"هذا المنتج رائع! كم سعره؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             35: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             36: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             37: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             38: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"هذا المنتج رائع! كم سعره؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n             39: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             40: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 50, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"neutral\\\",\\\"sentimentScore\\\":50,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             41: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 25, false, true, false, \"high\", \"{\\\"sentiment\\\":\\\"negative\\\",\\\"sentimentScore\\\":25,\\\"isSalesInquiry\\\":false,\\\"isComplaint\\\":true,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"high\\\",\\\"recommendedAction\\\":\\\"dm_invite\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             42: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             43: [\n  [ \"AND created_at >= NOW() - INTERVAL '30 days'\", raw: [ \"AND created_at >= NOW() - INTERVAL '30 days'\" ] ]\n]\n             44: [\n  [ \"\\n        SELECT \\n          COUNT(*) as total_comments,\\n          AVG(sentiment_score) as avg_sentiment,\\n          COUNT(CASE WHEN sentiment_score > 60 THEN 1 END) as positive,\\n          COUNT(CASE WHEN sentiment_score BETWEEN 30 AND 60 THEN 1 END) as neutral,\\n          COUNT(CASE WHEN sentiment_score < 30 THEN 1 END) as negative,\\n          COUNT(CASE WHEN is_sales_inquiry = true THEN 1 END) as sales_inquiries\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n    \"::uuid\\n        \", \"\\n      \", raw: [ \"\\n        SELECT \\n          COUNT(*) as total_comments,\\n          AVG(sentiment_score) as avg_sentiment,\\n          COUNT(CASE WHEN sentiment_score > 60 THEN 1 END) as positive,\\n          COUNT(CASE WHEN sentiment_score BETWEEN 30 AND 60 THEN 1 END) as neutral,\\n          COUNT(CASE WHEN sentiment_score < 30 THEN 1 END) as negative,\\n          COUNT(CASE WHEN is_sales_inquiry = true THEN 1 END) as sales_inquiries\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n      \"::uuid\\n        \", \"\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             45: [\n  [ \"\\n        SELECT \\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          AVG(EXTRACT(EPOCH FROM (cr.created_at - ci.created_at))/60) as avg_response_time\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n    \"::uuid\\n        \", \"\\n      \", raw: [ \"\\n        SELECT \\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          AVG(EXTRACT(EPOCH FROM (cr.created_at - ci.created_at))/60) as avg_response_time\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n      \"::uuid\\n        \", \"\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             46: [\n  [ \"\\n        SELECT \\n          username,\\n          COUNT(*) as comment_count,\\n          AVG(sentiment_score) as engagement_score\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n    \"::uuid\\n        \", \"\\n        AND username IS NOT NULL\\n        GROUP BY username\\n        ORDER BY comment_count DESC\\n        LIMIT 10\\n      \",\n    raw: [ \"\\n        SELECT \\n          username,\\n          COUNT(*) as comment_count,\\n          AVG(sentiment_score) as engagement_score\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n      \"::uuid\\n        \", \"\\n        AND username IS NOT NULL\\n        GROUP BY username\\n        ORDER BY comment_count DESC\\n        LIMIT 10\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             47: [\n  [ \"\\n        SELECT \\n          COALESCE((metadata->>'postType')::text, 'unknown') as post_type,\\n          COUNT(*) as comments,\\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          COUNT(CASE WHEN ci.is_sales_inquiry = true THEN 1 END) as conversions\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n    \"::uuid\\n        \", \"\\n        GROUP BY COALESCE((metadata->>'postType')::text, 'unknown')\\n      \",\n    raw: [ \"\\n        SELECT \\n          COALESCE((metadata->>'postType')::text, 'unknown') as post_type,\\n          COUNT(*) as comments,\\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          COUNT(CASE WHEN ci.is_sales_inquiry = true THEN 1 END) as conversions\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n      \"::uuid\\n        \", \"\\n        GROUP BY COALESCE((metadata->>'postType')::text, 'unknown')\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             48: [\n  [ \"AND created_at BETWEEN \", \" AND \", \"\", raw: [ \"AND created_at BETWEEN \", \" AND \", \"\" ] ], 2024-01-01T00:00:00.000Z, 2024-01-31T00:00:00.000Z\n]\n             49: [\n  [ \"\\n        SELECT \\n          COUNT(*) as total_comments,\\n          AVG(sentiment_score) as avg_sentiment,\\n          COUNT(CASE WHEN sentiment_score > 60 THEN 1 END) as positive,\\n          COUNT(CASE WHEN sentiment_score BETWEEN 30 AND 60 THEN 1 END) as neutral,\\n          COUNT(CASE WHEN sentiment_score < 30 THEN 1 END) as negative,\\n          COUNT(CASE WHEN is_sales_inquiry = true THEN 1 END) as sales_inquiries\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n    \"::uuid\\n        \", \"\\n      \", raw: [ \"\\n        SELECT \\n          COUNT(*) as total_comments,\\n          AVG(sentiment_score) as avg_sentiment,\\n          COUNT(CASE WHEN sentiment_score > 60 THEN 1 END) as positive,\\n          COUNT(CASE WHEN sentiment_score BETWEEN 30 AND 60 THEN 1 END) as neutral,\\n          COUNT(CASE WHEN sentiment_score < 30 THEN 1 END) as negative,\\n          COUNT(CASE WHEN is_sales_inquiry = true THEN 1 END) as sales_inquiries\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n      \"::uuid\\n        \", \"\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             50: [\n  [ \"\\n        SELECT \\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          AVG(EXTRACT(EPOCH FROM (cr.created_at - ci.created_at))/60) as avg_response_time\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n    \"::uuid\\n        \", \"\\n      \", raw: [ \"\\n        SELECT \\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          AVG(EXTRACT(EPOCH FROM (cr.created_at - ci.created_at))/60) as avg_response_time\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n      \"::uuid\\n        \", \"\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             51: [\n  [ \"\\n        SELECT \\n          username,\\n          COUNT(*) as comment_count,\\n          AVG(sentiment_score) as engagement_score\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n    \"::uuid\\n        \", \"\\n        AND username IS NOT NULL\\n        GROUP BY username\\n        ORDER BY comment_count DESC\\n        LIMIT 10\\n      \",\n    raw: [ \"\\n        SELECT \\n          username,\\n          COUNT(*) as comment_count,\\n          AVG(sentiment_score) as engagement_score\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n      \"::uuid\\n        \", \"\\n        AND username IS NOT NULL\\n        GROUP BY username\\n        ORDER BY comment_count DESC\\n        LIMIT 10\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             52: [\n  [ \"\\n        SELECT \\n          COALESCE((metadata->>'postType')::text, 'unknown') as post_type,\\n          COUNT(*) as comments,\\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          COUNT(CASE WHEN ci.is_sales_inquiry = true THEN 1 END) as conversions\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n    \"::uuid\\n        \", \"\\n        GROUP BY COALESCE((metadata->>'postType')::text, 'unknown')\\n      \",\n    raw: [ \"\\n        SELECT \\n          COALESCE((metadata->>'postType')::text, 'unknown') as post_type,\\n          COUNT(*) as comments,\\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          COUNT(CASE WHEN ci.is_sales_inquiry = true THEN 1 END) as conversions\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n      \"::uuid\\n        \", \"\\n        GROUP BY COALESCE((metadata->>'postType')::text, 'unknown')\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             53: [\n  [ \"AND created_at >= NOW() - INTERVAL '30 days'\", raw: [ \"AND created_at >= NOW() - INTERVAL '30 days'\" ] ]\n]\n             54: [\n  [ \"\\n        SELECT \\n          COUNT(*) as total_comments,\\n          AVG(sentiment_score) as avg_sentiment,\\n          COUNT(CASE WHEN sentiment_score > 60 THEN 1 END) as positive,\\n          COUNT(CASE WHEN sentiment_score BETWEEN 30 AND 60 THEN 1 END) as neutral,\\n          COUNT(CASE WHEN sentiment_score < 30 THEN 1 END) as negative,\\n          COUNT(CASE WHEN is_sales_inquiry = true THEN 1 END) as sales_inquiries\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n    \"::uuid\\n        \", \"\\n      \", raw: [ \"\\n        SELECT \\n          COUNT(*) as total_comments,\\n          AVG(sentiment_score) as avg_sentiment,\\n          COUNT(CASE WHEN sentiment_score > 60 THEN 1 END) as positive,\\n          COUNT(CASE WHEN sentiment_score BETWEEN 30 AND 60 THEN 1 END) as neutral,\\n          COUNT(CASE WHEN sentiment_score < 30 THEN 1 END) as negative,\\n          COUNT(CASE WHEN is_sales_inquiry = true THEN 1 END) as sales_inquiries\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n      \"::uuid\\n        \", \"\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             55: [\n  [ \"\\n        SELECT \\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          AVG(EXTRACT(EPOCH FROM (cr.created_at - ci.created_at))/60) as avg_response_time\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n    \"::uuid\\n        \", \"\\n      \", raw: [ \"\\n        SELECT \\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          AVG(EXTRACT(EPOCH FROM (cr.created_at - ci.created_at))/60) as avg_response_time\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n      \"::uuid\\n        \", \"\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             56: [\n  [ \"\\n        SELECT \\n          username,\\n          COUNT(*) as comment_count,\\n          AVG(sentiment_score) as engagement_score\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n    \"::uuid\\n        \", \"\\n        AND username IS NOT NULL\\n        GROUP BY username\\n        ORDER BY comment_count DESC\\n        LIMIT 10\\n      \",\n    raw: [ \"\\n        SELECT \\n          username,\\n          COUNT(*) as comment_count,\\n          AVG(sentiment_score) as engagement_score\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n      \"::uuid\\n        \", \"\\n        AND username IS NOT NULL\\n        GROUP BY username\\n        ORDER BY comment_count DESC\\n        LIMIT 10\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             57: [\n  [ \"\\n        SELECT \\n          COALESCE((metadata->>'postType')::text, 'unknown') as post_type,\\n          COUNT(*) as comments,\\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          COUNT(CASE WHEN ci.is_sales_inquiry = true THEN 1 END) as conversions\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n    \"::uuid\\n        \", \"\\n        GROUP BY COALESCE((metadata->>'postType')::text, 'unknown')\\n      \",\n    raw: [ \"\\n        SELECT \\n          COALESCE((metadata->>'postType')::text, 'unknown') as post_type,\\n          COUNT(*) as comments,\\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          COUNT(CASE WHEN ci.is_sales_inquiry = true THEN 1 END) as conversions\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n      \"::uuid\\n        \", \"\\n        GROUP BY COALESCE((metadata->>'postType')::text, 'unknown')\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <resolved> }\n]\n             58: [\n  [ \"AND created_at >= NOW() - INTERVAL '30 days'\", raw: [ \"AND created_at >= NOW() - INTERVAL '30 days'\" ] ]\n]\n             59: [\n  [ \"\\n        SELECT \\n          COUNT(*) as total_comments,\\n          AVG(sentiment_score) as avg_sentiment,\\n          COUNT(CASE WHEN sentiment_score > 60 THEN 1 END) as positive,\\n          COUNT(CASE WHEN sentiment_score BETWEEN 30 AND 60 THEN 1 END) as neutral,\\n          COUNT(CASE WHEN sentiment_score < 30 THEN 1 END) as negative,\\n          COUNT(CASE WHEN is_sales_inquiry = true THEN 1 END) as sales_inquiries\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n    \"::uuid\\n        \", \"\\n      \", raw: [ \"\\n        SELECT \\n          COUNT(*) as total_comments,\\n          AVG(sentiment_score) as avg_sentiment,\\n          COUNT(CASE WHEN sentiment_score > 60 THEN 1 END) as positive,\\n          COUNT(CASE WHEN sentiment_score BETWEEN 30 AND 60 THEN 1 END) as neutral,\\n          COUNT(CASE WHEN sentiment_score < 30 THEN 1 END) as negative,\\n          COUNT(CASE WHEN is_sales_inquiry = true THEN 1 END) as sales_inquiries\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n      \"::uuid\\n        \", \"\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <rejected> }\n]\n             60: [\n  [ \"\\n        SELECT \\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          AVG(EXTRACT(EPOCH FROM (cr.created_at - ci.created_at))/60) as avg_response_time\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n    \"::uuid\\n        \", \"\\n      \", raw: [ \"\\n        SELECT \\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          AVG(EXTRACT(EPOCH FROM (cr.created_at - ci.created_at))/60) as avg_response_time\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n      \"::uuid\\n        \", \"\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <rejected> }\n]\n             61: [\n  [ \"\\n        SELECT \\n          username,\\n          COUNT(*) as comment_count,\\n          AVG(sentiment_score) as engagement_score\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n    \"::uuid\\n        \", \"\\n        AND username IS NOT NULL\\n        GROUP BY username\\n        ORDER BY comment_count DESC\\n        LIMIT 10\\n      \",\n    raw: [ \"\\n        SELECT \\n          username,\\n          COUNT(*) as comment_count,\\n          AVG(sentiment_score) as engagement_score\\n        FROM comment_interactions\\n        WHERE merchant_id = \",\n      \"::uuid\\n        \", \"\\n        AND username IS NOT NULL\\n        GROUP BY username\\n        ORDER BY comment_count DESC\\n        LIMIT 10\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <rejected> }\n]\n             62: [\n  [ \"\\n        SELECT \\n          COALESCE((metadata->>'postType')::text, 'unknown') as post_type,\\n          COUNT(*) as comments,\\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          COUNT(CASE WHEN ci.is_sales_inquiry = true THEN 1 END) as conversions\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n    \"::uuid\\n        \", \"\\n        GROUP BY COALESCE((metadata->>'postType')::text, 'unknown')\\n      \",\n    raw: [ \"\\n        SELECT \\n          COALESCE((metadata->>'postType')::text, 'unknown') as post_type,\\n          COUNT(*) as comments,\\n          COUNT(CASE WHEN cr.response_type IS NOT NULL THEN 1 END) as responses,\\n          COUNT(CASE WHEN ci.is_sales_inquiry = true THEN 1 END) as conversions\\n        FROM comment_interactions ci\\n        LEFT JOIN comment_responses cr ON ci.id = cr.comment_id\\n        WHERE ci.merchant_id = \",\n      \"::uuid\\n        \", \"\\n        GROUP BY COALESCE((metadata->>'postType')::text, 'unknown')\\n      \"\n    ]\n  ], \"merchant-123\", Promise { <rejected> }\n]\n             63: [\n  [ \"\\n        INSERT INTO comment_moderation_rules (\\n          merchant_id,\\n          name,\\n          trigger_config,\\n          action_config,\\n          is_active,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        RETURNING id\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_moderation_rules (\\n          merchant_id,\\n          name,\\n          trigger_config,\\n          action_config,\\n          is_active,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        RETURNING id\\n      \"\n    ]\n  ], \"merchant-123\", \"Block Spam Keywords\", \"{\\\"type\\\":\\\"keyword\\\",\\\"value\\\":\\\"spam\\\",\\\"operator\\\":\\\"contains\\\"}\",\n  \"{\\\"type\\\":\\\"hide\\\",\\\"priority\\\":100}\", true\n]\n             64: [\n  [ \"\\n        INSERT INTO comment_moderation_rules (\\n          merchant_id,\\n          name,\\n          trigger_config,\\n          action_config,\\n          is_active,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        RETURNING id\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_moderation_rules (\\n          merchant_id,\\n          name,\\n          trigger_config,\\n          action_config,\\n          is_active,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        RETURNING id\\n      \"\n    ]\n  ], \"merchant-123\", \"Block Spam Keywords\", \"{\\\"type\\\":\\\"keyword\\\",\\\"value\\\":\\\"spam\\\",\\\"operator\\\":\\\"contains\\\"}\",\n  \"{\\\"type\\\":\\\"hide\\\",\\\"priority\\\":100}\", true\n]\n             65: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"This is spam promotional content\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             66: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             67: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"like\", \"\"\n]\n             68: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             69: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"هذا المنتج رائع! كم سعره؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             70: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             71: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             72: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"أهلاً @test_user! 🛍️ راح أرسلك رسالة خاصة بكل التفاصيل والأسعار الخاصة ✨\"\n]\n             73: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             74: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"هذا المنتج رائع! كم سعره؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n             75: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"هذا المنتج رائع! كم سعره؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             76: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             77: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             78: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"أهلاً @test_user! 🛍️ راح أرسلك رسالة خاصة بكل التفاصيل والأسعار الخاصة ✨\"\n]\n             79: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             80: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"هذا المنتج رائع! كم سعره؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n             81: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"هذا المنتج رائع! كم سعره؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             82: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             83: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             84: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"أهلاً @test_user! 🛍️ راح أرسلك رسالة خاصة بكل التفاصيل والأسعار الخاصة ✨\"\n]\n             85: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             86: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"هذا المنتج رائع! كم سعره؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n             87: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"هذا المنتج رائع! كم سعره؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             88: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             89: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             90: [\n  [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \",\n    raw: [ \"\\n        INSERT INTO comment_responses (\\n          comment_id,\\n          merchant_id,\\n          response_type,\\n          response_content,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"dm_invite\", \"أهلاً @test_user! 🛍️ راح أرسلك رسالة خاصة بكل التفاصيل والأسعار الخاصة ✨\"\n]\n             91: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             92: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"هذا المنتج رائع! كم سعره؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n             93: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"هذا المنتج رائع! كم سعره؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             94: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n             95: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n             96: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n             97: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"هذا المنتج رائع! كم سعره؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n             98: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"هذا المنتج رائع! كم سعره؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n             99: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n            100: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n            101: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n            102: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"هذا المنتج رائع! كم سعره؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n            103: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"هذا المنتج رائع! كم سعره؟\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n            104: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 75, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"positive\\\",\\\"sentimentScore\\\":75,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n            105: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n            106: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n            107: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"هذا المنتج رائع! كم سعره؟\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n            108: [\n  [\n    \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n    \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \",\n    raw: [\n      \"\\n        INSERT INTO comment_interactions (\\n          id,\\n          merchant_id,\\n          post_id,\\n          parent_comment_id,\\n          user_id,\\n          username,\\n          content,\\n          timestamp,\\n          is_reply,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \",\\n          \", \"::uuid,\\n          \", \",\\n          \", \",\\n          \", \",\\n          \",\n      \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          \", \",\\n          NOW()\\n        )\\n        ON CONFLICT (id) DO UPDATE SET\\n          content = EXCLUDED.content,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"comment-123\", \"merchant-123\", \"post-456\", null, \"user-789\", \"test_user\", \"أريد أشتري هذا المنتج\",\n  2025-08-21T18:06:54.175Z, false, \"{\\\"postType\\\":\\\"photo\\\",\\\"postUrl\\\":\\\"https://instagram.com/p/test\\\",\\\"hasHashtags\\\":false,\\\"mentionsCount\\\":0}\"\n]\n            109: [\n  [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n    \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n    \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n    \"\\n        AND merchant_id = \", \"::uuid\\n      \", raw: [ \"\\n        UPDATE comment_interactions\\n        SET \\n          sentiment_score = \",\n      \",\\n          is_sales_inquiry = \", \",\\n          is_complaint = \", \",\\n          is_spam = \",\n      \",\\n          urgency_level = \", \",\\n          analysis_data = \", \",\\n          updated_at = NOW()\\n        WHERE id = \",\n      \"\\n        AND merchant_id = \", \"::uuid\\n      \"\n    ]\n  ], 50, true, false, false, \"medium\", \"{\\\"sentiment\\\":\\\"neutral\\\",\\\"sentimentScore\\\":50,\\\"isSalesInquiry\\\":true,\\\"isComplaint\\\":false,\\\"isSpam\\\":false,\\\"keywords\\\":[],\\\"urgencyLevel\\\":\\\"medium\\\",\\\"recommendedAction\\\":\\\"reply\\\"}\",\n  \"comment-123\", \"merchant-123\"\n]\n            110: [\n  [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n    \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \",\n    raw: [ \"\\n        SELECT *\\n        FROM comment_moderation_rules\\n        WHERE merchant_id = \",\n      \"::uuid\\n        AND is_active = true\\n        ORDER BY (action_config->>'priority')::int DESC\\n      \"\n    ]\n  ], \"merchant-123\"\n]\n            111: [\n  [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n    \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n    \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO daily_analytics (\\n          merchant_id,\\n          date,\\n          platform,\\n          comments_received,\\n          comments_responded,\\n          response_rate\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          CURRENT_DATE,\\n          'instagram',\\n          1,\\n          \",\n      \",\\n          \", \"\\n        )\\n        ON CONFLICT (merchant_id, date, platform)\\n        DO UPDATE SET\\n          comments_received = daily_analytics.comments_received + 1,\\n          comments_responded = daily_analytics.comments_responded + \",\n      \",\\n          response_rate = (daily_analytics.comments_responded::float / daily_analytics.comments_received::float) * 100,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", 1, 100, 1\n]\n            112: [\n  [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n    \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n    \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \",\n    raw: [ \"\\n        INSERT INTO sales_opportunities (\\n          merchant_id,\\n          customer_id,\\n          source_platform,\\n          opportunity_type,\\n          status,\\n          metadata,\\n          created_at\\n        ) VALUES (\\n          \",\n      \"::uuid,\\n          \", \",\\n          'instagram',\\n          'COMMENT_INQUIRY',\\n          'NEW',\\n          \",\n      \",\\n          NOW()\\n        )\\n        ON CONFLICT (merchant_id, customer_id, source_platform)\\n        DO UPDATE SET\\n          status = 'ACTIVE',\\n          metadata = EXCLUDED.metadata,\\n          updated_at = NOW()\\n      \"\n    ]\n  ], \"merchant-123\", \"user-789\", \"{\\\"commentId\\\":\\\"comment-123\\\",\\\"postId\\\":\\\"post-456\\\",\\\"commentContent\\\":\\\"أريد أشتري هذا المنتج\\\",\\\"source\\\":\\\"comment\\\"}\"\n]\n\n    Number of calls: 112\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:724:23)\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Database Operations - عمليات قاعدة البيانات > should create sales opportunity for sales inquiries [10.03ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Database Operations - عمليات قاعدة البيانات > should log comment responses in database [3.32ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Error Handling - التعامل مع الأخطاء > should handle database connection errors [0.31ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Error Handling - التعامل مع الأخطاء > should handle Instagram API errors [2.99ms]\n771 |       );\n772 | \n773 |       const result = await commentsManager.processComment(sampleComment, testMerchantId);\n774 | \n775 |       // Should still process comment even without Redis\n776 |       expect(result.success).toBe(true);\n                                   ^\nerror: expect(received).toBe(expected)\n\nExpected: true\nReceived: false\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:776:30)\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Error Handling - التعامل مع الأخطاء > should handle Redis connection errors [3.22ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Error Handling - التعامل مع الأخطاء > should handle malformed JSON in moderation rules [3.15ms]\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Performance and Memory Management - الأداء وإدارة الذاكرة > should dispose resources properly [0.05ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Performance and Memory Management - الأداء وإدارة الذاكرة > should handle high volume of concurrent comments [282.02ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n(pass) Instagram Comments Manager - مدير تعليقات Instagram > Performance and Memory Management - الأداء وإدارة الذاكرة > should prevent memory leaks in credentials cache [128.77ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n851 |       expect(result.success).toBe(true);\n852 |       expect([\n853 |         'replied',\n854 |         'dm_invited',\n855 |         'liked'\n856 |       ]).toContain(result.actionTaken);\n               ^\nerror: expect(received).toContain(expected)\n\nExpected to contain: \"none\"\nReceived: [ \"replied\", \"dm_invited\", \"liked\" ]\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:856:10)\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Integration Tests - اختبارات التكامل > should complete full comment processing workflow [5.87ms]\n❌ Invalid trigger_config for rule comment-123: 820 |       `;\n821 | \n822 |       for (const ruleData of rules) {\n823 |         let triggerConfig;\n824 |         try {\n825 |           triggerConfig = JSON.parse(ruleData.trigger_config);\n                                     ^\nSyntaxError: JSON Parse error: Unexpected identifier \"undefined\"\n      at checkModerationRules (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.ts:825:32)\n\n868 |       };\n869 | \n870 |       const result = await commentsManager.processComment(complexSalesComment, testMerchantId);\n871 | \n872 |       expect(result.success).toBe(true);\n873 |       expect(result.responseGenerated).toBe(true);\n                                             ^\nerror: expect(received).toBe(expected)\n\nExpected: true\nReceived: false\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-comments-manager.test.ts:873:40)\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Integration Tests - اختبارات التكامل > should handle complex sales inquiry with analytics update [5.90ms]\n\n13 tests failed:\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Comment Processing - معالجة التعليقات > should process comment successfully with reply response [9.11ms]\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Comment Processing - معالجة التعليقات > should handle processing errors gracefully [6.59ms]\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Comment Response Generation - توليد ردود التعليقات > should handle response generation errors [3.27ms]\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Comment Analytics - تحليلات التعليقات > should filter analytics by date range [4.59ms]\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Comment Analytics - تحليلات التعليقات > should calculate response rate correctly [3.29ms]\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Comment Analytics - تحليلات التعليقات > should handle analytics errors gracefully [3.22ms]\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Moderation Rules - قواعد الإشراف > should apply moderation rules during comment processing [5.67ms]\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Credentials Management - إدارة أوراق الاعتماد > should cache and reuse valid credentials [9.25ms]\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Credentials Management - إدارة أوراق الاعتماد > should handle missing credentials error [7.81ms]\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Database Operations - عمليات قاعدة البيانات > should create sales opportunity for sales inquiries [10.03ms]\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Error Handling - التعامل مع الأخطاء > should handle Redis connection errors [3.22ms]\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Integration Tests - اختبارات التكامل > should complete full comment processing workflow [5.87ms]\n(fail) Instagram Comments Manager - مدير تعليقات Instagram > Integration Tests - اختبارات التكامل > should handle complex sales inquiry with analytics update [5.90ms]\n\n 31 pass\n 13 fail\n 1 error\n 90 expect() calls\nRan 44 tests across 1 file. [2.04s]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/repositories/merchant-repository.test.ts",
      "status": "failed",
      "duration": 427,
      "errors": [
        "Error: \nsrc/repositories/merchant-repository.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n262 |     const url = new URL(databaseUrl);\n263 | \n264 |     return {\n265 |       host: url.hostname,\n266 |       port: parseInt(url.port) || 5432,\n267 |       database: url.pathname.slice(1), // Remove leading slash\n                                          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:267:37)\n-------------------------------\n\n(fail) MerchantRepository - Production Tests > create() - Merchant Creation Tests > should create new merchant with valid data\n(fail) MerchantRepository - Production Tests > create() - Merchant Creation Tests > should create merchant with default values\n(fail) MerchantRepository - Production Tests > create() - Merchant Creation Tests > should handle Arabic business names correctly\n(fail) MerchantRepository - Production Tests > create() - Merchant Creation Tests > should reject duplicate email addresses\n144 |         businessName: 'Findable Store',\n145 |         businessCategory: 'food',\n146 |         contactEmail: 'findable@test.com'\n147 |       };\n148 | \n149 |       const created = await repository.create(merchantData);\n                                  ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:149:29)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:142:49)\n(fail) MerchantRepository - Production Tests > findById() - Merchant Retrieval Tests > should find existing merchant by ID [2.13ms]\n158 |     });\n159 | \n160 |     test('should return null for non-existent merchant ID', async () => {\n161 |       const nonExistentId = '00000000-0000-0000-0000-000000000000';\n162 | \n163 |       const result = await repository.findById(nonExistentId);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.findById')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:163:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:160:61)\n(fail) MerchantRepository - Production Tests > findById() - Merchant Retrieval Tests > should return null for non-existent merchant ID [1.91ms]\n166 |     });\n167 | \n168 |     test('should handle invalid UUID format gracefully', async () => {\n169 |       const invalidId = 'not-a-valid-uuid';\n170 | \n171 |       await expect(repository.findById(invalidId)).rejects.toThrow();\n                         ^\nTypeError: undefined is not an object (evaluating 'repository.findById')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:171:20)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:168:58)\n(fail) MerchantRepository - Production Tests > findById() - Merchant Retrieval Tests > should handle invalid UUID format gracefully [2.91ms]\n179 |         businessName: 'Email Searchable Store',\n180 |         businessCategory: 'services',\n181 |         contactEmail: email\n182 |       };\n183 | \n184 |       const created = await repository.create(merchantData);\n                                  ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:184:29)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:176:51)\n(fail) MerchantRepository - Production Tests > findByEmail() - Email-based Retrieval Tests > should find merchant by email address [2.99ms]\n190 |       expect(found!.contactEmail).toBe(email);\n191 |       expect(found!.id).toBe(created.id);\n192 |     });\n193 | \n194 |     test('should return null for non-existent email', async () => {\n195 |       const result = await repository.findByEmail('nonexistent@test.com');\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.findByEmail')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:195:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:194:55)\n(fail) MerchantRepository - Production Tests > findByEmail() - Email-based Retrieval Tests > should return null for non-existent email [6.32ms]\n203 |         businessName: 'Case Test Store',\n204 |         businessCategory: 'fashion',\n205 |         contactEmail: email.toLowerCase()\n206 |       };\n207 | \n208 |       const created = await repository.create(merchantData);\n                                  ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:208:29)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:200:57)\n(fail) MerchantRepository - Production Tests > findByEmail() - Email-based Retrieval Tests > should be case insensitive for email search [3.04ms]\n225 |         contactEmail: 'updatable@test.com',\n226 |         subscriptionTier: 'FREE',\n227 |         settings: { theme: 'light' }\n228 |       };\n229 | \n230 |       testMerchant = await repository.create(merchantData);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:230:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:221:16)\n(fail) MerchantRepository - Production Tests > update() - Merchant Update Tests > should update business information [2.43ms]\n(fail) MerchantRepository - Production Tests > update() - Merchant Update Tests > should update business information\n225 |         contactEmail: 'updatable@test.com',\n226 |         subscriptionTier: 'FREE',\n227 |         settings: { theme: 'light' }\n228 |       };\n229 | \n230 |       testMerchant = await repository.create(merchantData);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:230:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:221:16)\n(fail) MerchantRepository - Production Tests > update() - Merchant Update Tests > should update subscription tier and auto-adjust message limit [2.93ms]\n(fail) MerchantRepository - Production Tests > update() - Merchant Update Tests > should update subscription tier and auto-adjust message limit\n225 |         contactEmail: 'updatable@test.com',\n226 |         subscriptionTier: 'FREE',\n227 |         settings: { theme: 'light' }\n228 |       };\n229 | \n230 |       testMerchant = await repository.create(merchantData);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:230:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:221:16)\n(fail) MerchantRepository - Production Tests > update() - Merchant Update Tests > should update subscription tier with custom message limit [1.84ms]\n(fail) MerchantRepository - Production Tests > update() - Merchant Update Tests > should update subscription tier with custom message limit\n225 |         contactEmail: 'updatable@test.com',\n226 |         subscriptionTier: 'FREE',\n227 |         settings: { theme: 'light' }\n228 |       };\n229 | \n230 |       testMerchant = await repository.create(merchantData);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:230:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:221:16)\n(fail) MerchantRepository - Production Tests > update() - Merchant Update Tests > should update settings while preserving existing keys [2.04ms]\n(fail) MerchantRepository - Production Tests > update() - Merchant Update Tests > should update settings while preserving existing keys\n225 |         contactEmail: 'updatable@test.com',\n226 |         subscriptionTier: 'FREE',\n227 |         settings: { theme: 'light' }\n228 |       };\n229 | \n230 |       testMerchant = await repository.create(merchantData);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:230:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:221:16)\n(fail) MerchantRepository - Production Tests > update() - Merchant Update Tests > should activate/deactivate merchant [1.70ms]\n(fail) MerchantRepository - Production Tests > update() - Merchant Update Tests > should activate/deactivate merchant\n225 |         contactEmail: 'updatable@test.com',\n226 |         subscriptionTier: 'FREE',\n227 |         settings: { theme: 'light' }\n228 |       };\n229 | \n230 |       testMerchant = await repository.create(merchantData);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:230:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:221:16)\n(fail) MerchantRepository - Production Tests > update() - Merchant Update Tests > should return null for non-existent merchant [5.00ms]\n(fail) MerchantRepository - Production Tests > update() - Merchant Update Tests > should return null for non-existent merchant\n225 |         contactEmail: 'updatable@test.com',\n226 |         subscriptionTier: 'FREE',\n227 |         settings: { theme: 'light' }\n228 |       };\n229 | \n230 |       testMerchant = await repository.create(merchantData);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:230:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:221:16)\n(fail) MerchantRepository - Production Tests > update() - Merchant Update Tests > should handle empty update gracefully [3.37ms]\n(fail) MerchantRepository - Production Tests > should handle empty update gracefully\n322 |         contactEmail: 'usage@test.com',\n323 |         subscriptionTier: 'BASIC',\n324 |         monthlyMessageLimit: 100\n325 |       };\n326 | \n327 |       testMerchant = await repository.create(merchantData);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:327:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:318:16)\n(fail) MerchantRepository - Production Tests > Message Usage Tracking Tests > should increment message usage successfully [3.74ms]\n(fail) MerchantRepository - Production Tests > Message Usage Tracking Tests > should increment message usage successfully\n322 |         contactEmail: 'usage@test.com',\n323 |         subscriptionTier: 'BASIC',\n324 |         monthlyMessageLimit: 100\n325 |       };\n326 | \n327 |       testMerchant = await repository.create(merchantData);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:327:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:318:16)\n(fail) MerchantRepository - Production Tests > Message Usage Tracking Tests > should prevent exceeding message limit [2.26ms]\n(fail) MerchantRepository - Production Tests > Message Usage Tracking Tests > should prevent exceeding message limit\n322 |         contactEmail: 'usage@test.com',\n323 |         subscriptionTier: 'BASIC',\n324 |         monthlyMessageLimit: 100\n325 |       };\n326 | \n327 |       testMerchant = await repository.create(merchantData);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:327:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:318:16)\n(fail) MerchantRepository - Production Tests > Message Usage Tracking Tests > should allow usage exactly at the limit [2.91ms]\n(fail) MerchantRepository - Production Tests > Message Usage Tracking Tests > should allow usage exactly at the limit\n322 |         contactEmail: 'usage@test.com',\n323 |         subscriptionTier: 'BASIC',\n324 |         monthlyMessageLimit: 100\n325 |       };\n326 | \n327 |       testMerchant = await repository.create(merchantData);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:327:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:318:16)\n(fail) MerchantRepository - Production Tests > Message Usage Tracking Tests > should reset monthly usage [3.24ms]\n(fail) MerchantRepository - Production Tests > Message Usage Tracking Tests > should reset monthly usage\n322 |         contactEmail: 'usage@test.com',\n323 |         subscriptionTier: 'BASIC',\n324 |         monthlyMessageLimit: 100\n325 |       };\n326 | \n327 |       testMerchant = await repository.create(merchantData);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:327:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:318:16)\n(fail) MerchantRepository - Production Tests > Message Usage Tracking Tests > should check if merchant can send message [2.10ms]\n(fail) MerchantRepository - Production Tests > Message Usage Tracking Tests > should check if merchant can send message\n322 |         contactEmail: 'usage@test.com',\n323 |         subscriptionTier: 'BASIC',\n324 |         monthlyMessageLimit: 100\n325 |       };\n326 | \n327 |       testMerchant = await repository.create(merchantData);\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:327:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:318:16)\n(fail) MerchantRepository - Production Tests > Message Usage Tracking Tests > should handle inactive merchant in canSendMessage [2.22ms]\n(fail) MerchantRepository - Production Tests > should handle inactive merchant in canSendMessage\n410 |         businessName: 'Activity Test Store',\n411 |         businessCategory: 'electronics',\n412 |         contactEmail: 'activity@test.com'\n413 |       };\n414 | \n415 |       const merchant = await repository.create(merchantData);\n                                   ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:415:30)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:408:49)\n(fail) MerchantRepository - Production Tests > updateLastActive() - Activity Tracking Tests > should update last active timestamp [3.86ms]\n455 |           subscriptionTier: 'FREE' as const\n456 |         }\n457 |       ];\n458 | \n459 |       for (const merchantData of merchants) {\n460 |         const created = await repository.create(merchantData);\n                                    ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:460:31)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:434:16)\n(fail) MerchantRepository - Production Tests > findMany() - Filtered Retrieval Tests > should filter by subscription tier [3.08ms]\n(fail) MerchantRepository - Production Tests > findMany() - Filtered Retrieval Tests > should filter by subscription tier\n455 |           subscriptionTier: 'FREE' as const\n456 |         }\n457 |       ];\n458 | \n459 |       for (const merchantData of merchants) {\n460 |         const created = await repository.create(merchantData);\n                                    ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:460:31)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:434:16)\n(fail) MerchantRepository - Production Tests > findMany() - Filtered Retrieval Tests > should filter by active status [2.68ms]\n(fail) MerchantRepository - Production Tests > findMany() - Filtered Retrieval Tests > should filter by active status\n455 |           subscriptionTier: 'FREE' as const\n456 |         }\n457 |       ];\n458 | \n459 |       for (const merchantData of merchants) {\n460 |         const created = await repository.create(merchantData);\n                                    ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:460:31)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:434:16)\n(fail) MerchantRepository - Production Tests > findMany() - Filtered Retrieval Tests > should filter by business category [2.37ms]\n(fail) MerchantRepository - Production Tests > findMany() - Filtered Retrieval Tests > should filter by business category\n455 |           subscriptionTier: 'FREE' as const\n456 |         }\n457 |       ];\n458 | \n459 |       for (const merchantData of merchants) {\n460 |         const created = await repository.create(merchantData);\n                                    ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:460:31)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:434:16)\n(fail) MerchantRepository - Production Tests > findMany() - Filtered Retrieval Tests > should search by business name and email [2.36ms]\n(fail) MerchantRepository - Production Tests > findMany() - Filtered Retrieval Tests > should search by business name and email\n455 |           subscriptionTier: 'FREE' as const\n456 |         }\n457 |       ];\n458 | \n459 |       for (const merchantData of merchants) {\n460 |         const created = await repository.create(merchantData);\n                                    ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:460:31)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:434:16)\n(fail) MerchantRepository - Production Tests > findMany() - Filtered Retrieval Tests > should apply limit and offset pagination [2.15ms]\n(fail) MerchantRepository - Production Tests > findMany() - Filtered Retrieval Tests > should apply limit and offset pagination\n455 |           subscriptionTier: 'FREE' as const\n456 |         }\n457 |       ];\n458 | \n459 |       for (const merchantData of merchants) {\n460 |         const created = await repository.create(merchantData);\n                                    ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:460:31)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:434:16)\n(fail) MerchantRepository - Production Tests > findMany() - Filtered Retrieval Tests > should combine multiple filters [2.56ms]\n(fail) MerchantRepository - Production Tests > should combine multiple filters\n549 |         { name: 'Over Limit Store', limit: 100, used: 105 }, // Over limit\n550 |         { name: 'Low Usage Store', limit: 100, used: 20 } // 20% usage\n551 |       ];\n552 | \n553 |       for (const data of merchantsData) {\n554 |         const merchant = await repository.create({\n                                     ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:554:32)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:544:16)\n(fail) MerchantRepository - Production Tests > Usage Limit Analysis Tests > should find merchants approaching limit [2.84ms]\n(fail) MerchantRepository - Production Tests > Usage Limit Analysis Tests > should find merchants approaching limit\n549 |         { name: 'Over Limit Store', limit: 100, used: 105 }, // Over limit\n550 |         { name: 'Low Usage Store', limit: 100, used: 20 } // 20% usage\n551 |       ];\n552 | \n553 |       for (const data of merchantsData) {\n554 |         const merchant = await repository.create({\n                                     ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:554:32)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:544:16)\n(fail) MerchantRepository - Production Tests > Usage Limit Analysis Tests > should find merchants over limit [2.28ms]\n(fail) MerchantRepository - Production Tests > Usage Limit Analysis Tests > should find merchants over limit\n549 |         { name: 'Over Limit Store', limit: 100, used: 105 }, // Over limit\n550 |         { name: 'Low Usage Store', limit: 100, used: 20 } // 20% usage\n551 |       ];\n552 | \n553 |       for (const data of merchantsData) {\n554 |         const merchant = await repository.create({\n                                     ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:554:32)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:544:16)\n(fail) MerchantRepository - Production Tests > Usage Limit Analysis Tests > should use custom threshold for approaching limit [2.60ms]\n(fail) MerchantRepository - Production Tests > should use custom threshold for approaching limit\n607 |         { tier: 'FREE', category: 'food', active: false, used: 10 },\n608 |         { tier: 'ENTERPRISE', category: 'services', active: true, used: 5000 }\n609 |       ];\n610 | \n611 |       for (const data of testData) {\n612 |         const merchant = await repository.create({\n                                     ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:612:32)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:601:16)\n(fail) MerchantRepository - Production Tests > Statistics and Analytics Tests > should generate comprehensive statistics [2.41ms]\n(fail) MerchantRepository - Production Tests > Statistics and Analytics Tests > should generate comprehensive statistics\n607 |         { tier: 'FREE', category: 'food', active: false, used: 10 },\n608 |         { tier: 'ENTERPRISE', category: 'services', active: true, used: 5000 }\n609 |       ];\n610 | \n611 |       for (const data of testData) {\n612 |         const merchant = await repository.create({\n                                     ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:612:32)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:601:16)\n(fail) MerchantRepository - Production Tests > Statistics and Analytics Tests > should count merchants with filters [2.50ms]\n(fail) MerchantRepository - Production Tests > should count merchants with filters\n663 | \n664 |   describe('Activation/Deactivation Helper Tests', () => {\n665 |     let testMerchant: Merchant;\n666 | \n667 |     beforeEach(async () => {\n668 |       testMerchant = await repository.create({\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:668:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:667:16)\n(fail) MerchantRepository - Production Tests > Activation/Deactivation Helper Tests > should activate merchant [2.44ms]\n(fail) MerchantRepository - Production Tests > Activation/Deactivation Helper Tests > should activate merchant\n663 | \n664 |   describe('Activation/Deactivation Helper Tests', () => {\n665 |     let testMerchant: Merchant;\n666 | \n667 |     beforeEach(async () => {\n668 |       testMerchant = await repository.create({\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:668:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:667:16)\n(fail) MerchantRepository - Production Tests > Activation/Deactivation Helper Tests > should deactivate merchant [2.57ms]\n(fail) MerchantRepository - Production Tests > Activation/Deactivation Helper Tests > should deactivate merchant\n663 | \n664 |   describe('Activation/Deactivation Helper Tests', () => {\n665 |     let testMerchant: Merchant;\n666 | \n667 |     beforeEach(async () => {\n668 |       testMerchant = await repository.create({\n                                 ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:668:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:667:16)\n(fail) MerchantRepository - Production Tests > Activation/Deactivation Helper Tests > should return false for non-existent merchant activation [2.14ms]\n(fail) MerchantRepository - Production Tests > should return false for non-existent merchant activation\n703 |     });\n704 |   });\n705 | \n706 |   describe('Performance and Edge Case Tests', () => {\n707 |     test('should handle concurrent message usage updates', async () => {\n708 |       const merchant = await repository.create({\n                                   ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:708:30)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:707:60)\n(fail) MerchantRepository - Production Tests > Performance and Edge Case Tests > should handle concurrent message usage updates [2.54ms]\n732 | \n733 |     test('should handle large datasets efficiently', async () => {\n734 |       const startTime = Date.now();\n735 | \n736 |       // Query should complete quickly even with many records\n737 |       const merchants = await repository.findMany({ limit: 100 });\n                                    ^\nTypeError: undefined is not an object (evaluating 'repository.findMany')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:737:31)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:733:54)\n(fail) MerchantRepository - Production Tests > Performance and Edge Case Tests > should handle large datasets efficiently [2.05ms]\n750 |         PREMIUM: 5000,\n751 |         ENTERPRISE: 50000\n752 |       };\n753 | \n754 |       for (const tier of tiers) {\n755 |         const merchant = await repository.create({\n                                     ^\nTypeError: undefined is not an object (evaluating 'repository.create')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:755:32)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/repositories/merchant-repository.test.ts:745:66)\n(fail) MerchantRepository - Production Tests > Performance and Edge Case Tests > should validate default message limits for all tiers [3.18ms]\n\n 0 pass\n 68 fail\n 1 error\nRan 68 tests across 1 file. [293.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/database/migrate.test.ts",
      "status": "failed",
      "duration": 322,
      "errors": [
        "Error: \nsrc/database/migrate.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n1 | (function (entry, fetcher)\n              ^\nSyntaxError: Export named 'migrate' not found in module '/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/migrate.ts'.\n      at loadAndEvaluateModule (1:11)\n-------------------------------\n\n\n 0 pass\n 1 fail\n 1 error\nRan 1 test across 1 file. [174.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/queue/enhanced-queue.test.ts",
      "status": "failed",
      "duration": 445,
      "errors": [
        "Error: \nsrc/queue/enhanced-queue.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n15 |   type JobProcessorEnhanced,\n16 |   type DLQEntry\n17 | } from './enhanced-queue.js';\n18 | \n19 | // Mock dependencies\n20 | jest.mock('../database/connection.js', () => ({\n          ^\nTypeError: jest.mock is not a function. (In 'jest.mock(\"../database/connection.js\", () => ({\n  getDatabase: jest.fn(() => ({\n    getSQL: jest.fn(() => ({\n      begin: jest.fn()\n    }))\n  }))\n}))', 'jest.mock' is undefined)\n      at /mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/queue/enhanced-queue.test.ts:20:6\n      at loadAndEvaluateModule (2:1)\n-------------------------------\n\n\n 0 pass\n 1 fail\n 1 error\nRan 1 test across 1 file. [267.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/queue/dead-letter.test.ts",
      "status": "passed",
      "duration": 279,
      "coverage": 0
    },
    {
      "file": "src/queue/processors/message-delivery-processor.test.ts",
      "status": "failed",
      "duration": 1435,
      "errors": [
        "Error: \nsrc/queue/processors/message-delivery-processor.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n262 |     const url = new URL(databaseUrl);\n263 | \n264 |     return {\n265 |       host: url.hostname,\n266 |       port: parseInt(url.port) || 5432,\n267 |       database: url.pathname.slice(1), // Remove leading slash\n                                          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:267:37)\n-------------------------------\n\n\n 0 pass\n 1 fail\n 1 error\nRan 1 test across 1 file. [1247.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/queue/processors/notification-processor.test.ts",
      "status": "passed",
      "duration": 195,
      "coverage": 0
    },
    {
      "file": "src/config/environment.test.ts",
      "status": "failed",
      "duration": 324,
      "errors": [
        "Error: \nsrc/config/environment.test.ts:\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should validate all required environment variables successfully [0.68ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should throw error for missing required DATABASE_URL [0.16ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should throw error for invalid DATABASE_URL format [0.07ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should validate Instagram App ID format [0.08ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should validate Instagram App Secret length [0.11ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should validate OpenAI API key format [0.08ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should validate encryption key format [0.27ms]\n146 |       expect(() => loadAndValidateEnvironment()).not.toThrow();\n147 |     });\n148 | \n149 |     test('should validate CORS origins format', () => {\n150 |       process.env.CORS_ORIGINS = '';\n151 |       expect(() => loadAndValidateEnvironment()).toThrow(/CORS_ORIGINS must be a comma-separated list/);\n                                                       ^\nerror: expect(received).toThrow(expected)\n\nExpected pattern: /CORS_ORIGINS must be a comma-separated list/\nReceived message: \"Environment validation failed:\\n  • Missing required environment variable: CORS_ORIGINS\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.test.ts:151:50)\n(fail) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should validate CORS origins format [3.09ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should validate redirect URI format [0.38ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should validate Redis URL format [0.20ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should use default values for optional variables [0.24ms]\n⚠️ REDIRECT_URI should match BASE_URL in production\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should validate NODE_ENV values [0.16ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should validate Graph API version format [0.10ms]\n210 |     beforeEach(() => {\n211 |       process.env.NODE_ENV = 'production';\n212 |     });\n213 | \n214 |     test('should warn about development redirect URI in production', () => {\n215 |       const consoleSpy = Bun.spyOn(console, 'warn');\n                                   ^\nTypeError: Bun.spyOn is not a function. (In 'Bun.spyOn(console, \"warn\")', 'Bun.spyOn' is undefined)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.test.ts:215:30)\n(fail) Environment Configuration - تكوين متغيرات البيئة > Production Environment Validation - التحقق من بيئة الإنتاج > should warn about development redirect URI in production [2.36ms]\n⚠️ REDIRECT_URI should match BASE_URL in production\n(pass) Environment Configuration - تكوين متغيرات البيئة > Production Environment Validation - التحقق من بيئة الإنتاج > should reject wildcard CORS in production [0.12ms]\n⚠️ REDIRECT_URI should match BASE_URL in production\n(pass) Environment Configuration - تكوين متغيرات البيئة > Production Environment Validation - التحقق من بيئة الإنتاج > should allow proper production configuration [0.36ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Database Configuration Parsing - تحليل تكوين قاعدة البيانات > should parse PostgreSQL URL correctly [0.14ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Database Configuration Parsing - تحليل تكوين قاعدة البيانات > should handle default port for PostgreSQL [0.06ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Database Configuration Parsing - تحليل تكوين قاعدة البيانات > should disable SSL when sslmode=disable [0.27ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Database Configuration Parsing - تحليل تكوين قاعدة البيانات > should handle database max connections [0.09ms]\n274 |     });\n275 | \n276 |     test('should throw error for invalid database URL', () => {\n277 |       process.env.DATABASE_URL = 'not-a-valid-url';\n278 | \n279 |       expect(() => loadAndValidateEnvironment()).toThrow(/Invalid DATABASE_URL format/);\n                                                       ^\nerror: expect(received).toThrow(expected)\n\nExpected pattern: /Invalid DATABASE_URL format/\nReceived message: \"Environment validation failed:\\n  • DATABASE_URL: DATABASE_URL must be a valid PostgreSQL connection string\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.test.ts:279:50)\n(fail) Environment Configuration - تكوين متغيرات البيئة > Database Configuration Parsing - تحليل تكوين قاعدة البيانات > should throw error for invalid database URL [2.35ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Runtime Configuration Validation - التحقق من التكوين أثناء التشغيل > should validate AI configuration limits [0.27ms]\n300 |       config.ai.temperature = 0.7;\n301 |       expect(() => validateRuntimeConfig(config)).not.toThrow();\n302 |     });\n303 | \n304 |     test('should warn about high database connections', () => {\n305 |       const consoleSpy = Bun.spyOn(console, 'warn');\n                                   ^\nTypeError: Bun.spyOn is not a function. (In 'Bun.spyOn(console, \"warn\")', 'Bun.spyOn' is undefined)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.test.ts:305:30)\n(fail) Environment Configuration - تكوين متغيرات البيئة > Runtime Configuration Validation - التحقق من التكوين أثناء التشغيل > should warn about high database connections [2.45ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Runtime Configuration Validation - التحقق من التكوين أثناء التشغيل > should reject wildcard CORS in production runtime [0.21ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Runtime Configuration Validation - التحقق من التكوين أثناء التشغيل > should pass valid runtime configuration [0.13ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Utilities - أدوات متغيرات البيئة > should get environment variable successfully [0.04ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Utilities - أدوات متغيرات البيئة > should use default value when variable not set [0.03ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Utilities - أدوات متغيرات البيئة > should throw error for missing required variable [0.09ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Utilities - أدوات متغيرات البيئة > should return actual value over default when set [0.04ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Configuration Singleton - نمط الكائن الواحد للتكوين > should return same configuration instance [0.16ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Configuration Singleton - نمط الكائن الواحد للتكوين > should reload configuration after reset [0.08ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Configuration Singleton - نمط الكائن الواحد للتكوين > should validate configuration on first load [0.06ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Complex Configuration Scenarios - سيناريوهات التكوين المعقدة > should handle multiple validation errors [0.11ms]\n⚠️ REDIRECT_URI should match BASE_URL in production\n(pass) Environment Configuration - تكوين متغيرات البيئة > Complex Configuration Scenarios - سيناريوهات التكوين المعقدة > should handle complete valid production configuration [0.09ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Complex Configuration Scenarios - سيناريوهات التكوين المعقدة > should handle all optional parameters with defaults [0.08ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Complex Configuration Scenarios - سيناريوهات التكوين المعقدة > should parse numeric environment variables correctly [0.04ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Edge Cases and Error Handling - الحالات الحدية والتعامل مع الأخطاء > should handle empty string environment variables [0.05ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Edge Cases and Error Handling - الحالات الحدية والتعامل مع الأخطاء > should handle whitespace in CORS origins [0.03ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Edge Cases and Error Handling - الحالات الحدية والتعامل مع الأخطاء > should handle empty trusted redirect domains [0.02ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Edge Cases and Error Handling - الحالات الحدية والتعامل مع الأخطاء > should handle malformed numeric values gracefully [0.02ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Edge Cases and Error Handling - الحالات الحدية والتعامل مع الأخطاء > should trim meta app secret whitespace [0.05ms]\n(pass) Environment Configuration - تكوين متغيرات البيئة > Integration with Real Environment - التكامل مع البيئة الحقيقية > should work with actual environment structure [0.09ms]\n\n4 tests failed:\n(fail) Environment Configuration - تكوين متغيرات البيئة > Environment Variable Validation - التحقق من متغيرات البيئة > should validate CORS origins format [3.09ms]\n(fail) Environment Configuration - تكوين متغيرات البيئة > Production Environment Validation - التحقق من بيئة الإنتاج > should warn about development redirect URI in production [2.36ms]\n(fail) Environment Configuration - تكوين متغيرات البيئة > Database Configuration Parsing - تحليل تكوين قاعدة البيانات > should throw error for invalid database URL [2.35ms]\n(fail) Environment Configuration - تكوين متغيرات البيئة > Runtime Configuration Validation - التحقق من التكوين أثناء التشغيل > should warn about high database connections [2.45ms]\n\n 38 pass\n 4 fail\n 90 expect() calls\nRan 42 tests across 1 file. [175.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/startup/validation.test.ts",
      "status": "failed",
      "duration": 353,
      "errors": [
        "Error: \nsrc/startup/validation.test.ts:\n(pass) Startup Validation - التحقق من صحة البدء > Complete Startup Validation - التحقق الكامل من البدء > should run all validation checks successfully [1.70ms]\n(pass) Startup Validation - التحقق من صحة البدء > Complete Startup Validation - التحقق الكامل من البدء > should detect critical errors and block startup [0.37ms]\n(pass) Startup Validation - التحقق من صحة البدء > Complete Startup Validation - التحقق الكامل من البدء > should handle database connection failures [0.20ms]\n(pass) Startup Validation - التحقق من صحة البدء > Complete Startup Validation - التحقق الكامل من البدء > should log detailed validation report [0.29ms]\n(pass) Startup Validation - التحقق من صحة البدء > Environment Configuration Validation - التحقق من تكوين البيئة > should validate all required environment variables [0.39ms]\n(pass) Startup Validation - التحقق من صحة البدء > Environment Configuration Validation - التحقق من تكوين البيئة > should detect missing required environment variables [0.48ms]\n(pass) Startup Validation - التحقق من صحة البدء > Environment Configuration Validation - التحقق من تكوين البيئة > should detect placeholder values in production [0.43ms]\n(pass) Startup Validation - التحقق من صحة البدء > Environment Configuration Validation - التحقق من تكوين البيئة > should validate AI configuration ranges [0.32ms]\n(pass) Startup Validation - التحقق من صحة البدء > Environment Configuration Validation - التحقق من تكوين البيئة > should validate database connection limits [0.31ms]\n(pass) Startup Validation - التحقق من صحة البدء > Environment Configuration Validation - التحقق من تكوين البيئة > should validate security configuration [0.21ms]\n(pass) Startup Validation - التحقق من صحة البدء > Database Validation - التحقق من قاعدة البيانات > should validate database connection successfully [0.16ms]\n(pass) Startup Validation - التحقق من صحة البدء > Database Validation - التحقق من قاعدة البيانات > should handle database connection failures [0.27ms]\n(pass) Startup Validation - التحقق من صحة البدء > Database Validation - التحقق من قاعدة البيانات > should detect unhealthy database status [0.21ms]\n(pass) Startup Validation - التحقق من صحة البدء > Database Validation - التحقق من قاعدة البيانات > should validate database schema and required tables [0.21ms]\n(pass) Startup Validation - التحقق من صحة البدء > Database Validation - التحقق من قاعدة البيانات > should detect missing required tables [0.22ms]\n(pass) Startup Validation - التحقق من صحة البدء > Database Validation - التحقق من قاعدة البيانات > should check for required PostgreSQL extensions [0.17ms]\n(pass) Startup Validation - التحقق من صحة البدء > External Services Validation - التحقق من الخدمات الخارجية > should validate OpenAI API connectivity [0.20ms]\n(pass) Startup Validation - التحقق من صحة البدء > External Services Validation - التحقق من الخدمات الخارجية > should handle OpenAI API authentication errors [0.15ms]\n(pass) Startup Validation - التحقق من صحة البدء > External Services Validation - التحقق من الخدمات الخارجية > should validate Instagram Graph API reachability [0.16ms]\n(pass) Startup Validation - التحقق من صحة البدء > External Services Validation - التحقق من الخدمات الخارجية > should handle network timeouts for external services [0.23ms]\n(pass) Startup Validation - التحقق من صحة البدء > External Services Validation - التحقق من الخدمات الخارجية > should handle fetch abortion due to timeout [0.24ms]\n(pass) Startup Validation - التحقق من صحة البدء > Security Configuration Validation - التحقق من تكوين الأمان > should validate security configuration successfully [0.18ms]\n(pass) Startup Validation - التحقق من صحة البدء > Security Configuration Validation - التحقق من تكوين الأمان > should detect production security issues [0.26ms]\n(pass) Startup Validation - التحقق من صحة البدء > Security Configuration Validation - التحقق من تكوين الأمان > should validate encryption key length [0.20ms]\n(pass) Startup Validation - التحقق من صحة البدء > Security Configuration Validation - التحقق من تكوين الأمان > should warn about high rate limits [0.17ms]\n574 | \n575 |   describe('Merchant Configuration Validation - التحقق من تكوين التاجر', () => {\n576 |     test('should validate active merchant successfully', async () => {\n577 |       const isValid = await validateMerchantConfig('test-merchant-123');\n578 | \n579 |       expect(isValid).toBe(true);\n                            ^\nerror: expect(received).toBe(expected)\n\nExpected: true\nReceived: false\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/startup/validation.test.ts:579:23)\n(fail) Startup Validation - التحقق من صحة البدء > Merchant Configuration Validation - التحقق من تكوين التاجر > should validate active merchant successfully [2.88ms]\n(pass) Startup Validation - التحقق من صحة البدء > Merchant Configuration Validation - التحقق من تكوين التاجر > should reject non-existent merchant [0.17ms]\n(pass) Startup Validation - التحقق من صحة البدء > Merchant Configuration Validation - التحقق من تكوين التاجر > should reject inactive merchant [0.09ms]\n(pass) Startup Validation - التحقق من صحة البدء > Merchant Configuration Validation - التحقق من تكوين التاجر > should handle database errors during merchant validation [0.10ms]\n617 |       const startTime = Date.now();\n618 |       const report = await runStartupValidation();\n619 |       const totalTime = Date.now() - startTime;\n620 | \n621 |       expect(totalTime).toBeLessThan(10000); // Should complete within 10 seconds\n622 |       expect(report.totalDuration).toBeGreaterThan(0);\n                                         ^\nerror: expect(received).toBeGreaterThan(expected)\n\nExpected: > 0\nReceived: 0\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/startup/validation.test.ts:622:36)\n(fail) Startup Validation - التحقق من صحة البدء > Validation Performance and Timing - الأداء والتوقيت > should complete validation within reasonable time [2.57ms]\n625 | \n626 |     test('should measure individual validation timings', async () => {\n627 |       const report = await runStartupValidation();\n628 | \n629 |       report.results.forEach(result => {\n630 |         expect(result.duration).toBeGreaterThan(0);\n                                      ^\nerror: expect(received).toBeGreaterThan(expected)\n\nExpected: > 0\nReceived: 0\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/startup/validation.test.ts:630:33)\n      at forEach (1:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/startup/validation.test.ts:629:22)\n(fail) Startup Validation - التحقق من صحة البدء > Validation Performance and Timing - الأداء والتوقيت > should measure individual validation timings [2.50ms]\n(pass) Startup Validation - التحقق من صحة البدء > Validation Performance and Timing - الأداء والتوقيت > should handle concurrent validations efficiently [1.06ms]\n(pass) Startup Validation - التحقق من صحة البدء > Error Recovery and Resilience - استعادة الأخطاء والمرونة > should continue validation even if non-critical services fail [0.33ms]\n(pass) Startup Validation - التحقق من صحة البدء > Error Recovery and Resilience - استعادة الأخطاء والمرونة > should provide detailed error information [0.29ms]\n(pass) Startup Validation - التحقق من صحة البدء > Error Recovery and Resilience - استعادة الأخطاء والمرونة > should handle partial validation failures gracefully [0.24ms]\n\n3 tests failed:\n(fail) Startup Validation - التحقق من صحة البدء > Merchant Configuration Validation - التحقق من تكوين التاجر > should validate active merchant successfully [2.88ms]\n(fail) Startup Validation - التحقق من صحة البدء > Validation Performance and Timing - الأداء والتوقيت > should complete validation within reasonable time [2.57ms]\n(fail) Startup Validation - التحقق من صحة البدء > Validation Performance and Timing - الأداء والتوقيت > should measure individual validation timings [2.50ms]\n\n 32 pass\n 3 fail\n 88 expect() calls\nRan 35 tests across 1 file. [208.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/api/service-control.test.ts",
      "status": "failed",
      "duration": 3965,
      "errors": [
        "Error: \nsrc/api/service-control.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at initializeDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:438:14)\n      at initializeDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:437:41)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:52:16)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:50:13)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:83:3)\n      at /mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:46:1\n-------------------------------\n\n(fail) Instagram Integration Tests > Service Control Tests > should get service status\n(fail) Instagram Integration Tests > Service Control Tests > should toggle service on/off\n(fail) Instagram Integration Tests > Service Control Tests > should get all services status\n(fail) Instagram Integration Tests > Service Control Tests > should get services health\n\n# Unhandled error between tests\n-------------------------------\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at initializeDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:438:14)\n      at initializeDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:437:41)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:55:16)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:53:13)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:107:3)\n      at /mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:47:1\n-------------------------------\n\n(fail) Service Control API - Production Tests > POST /api/services/toggle - Service Toggle Tests > should toggle service from enabled to disabled\n(fail) Service Control API - Production Tests > POST /api/services/toggle - Service Toggle Tests > should toggle service from disabled to enabled\n(fail) Service Control API - Production Tests > POST /api/services/toggle - Service Toggle Tests > should reject invalid merchant ID\n(fail) Service Control API - Production Tests > POST /api/services/toggle - Service Toggle Tests > should reject invalid service name\n(fail) Service Control API - Production Tests > POST /api/services/toggle - Service Toggle Tests > should handle non-existent merchant gracefully\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new InstagramAIService (1:17)\n      at getInstagramAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-ai.ts:875:34)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:148:25)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:147:51)\n(fail) Instagram Integration Tests > Instagram AI Service Tests > should generate Instagram DM response [9.77ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new InstagramAIService (1:17)\n      at getInstagramAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-ai.ts:875:34)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:181:25)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:180:50)\n(fail) Instagram Integration Tests > Instagram AI Service Tests > should generate story reply response [4.99ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new InstagramAIService (1:17)\n      at getInstagramAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-ai.ts:875:34)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:205:25)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:204:46)\n(fail) Instagram Integration Tests > Instagram AI Service Tests > should generate comment response [5.93ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new InstagramAIService (1:17)\n      at getInstagramAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-ai.ts:875:34)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:228:25)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:227:49)\n(fail) Instagram Integration Tests > Instagram AI Service Tests > should generate hashtag suggestions [4.02ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new AIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/ai.ts:87:17)\n      at getAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/ai.ts:510:25)\n      at new ConversationAIOrchestrator (1:17)\n      at getConversationAIOrchestrator (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/conversation-ai-orchestrator.ts:712:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:254:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:253:55)\n(fail) Instagram Integration Tests > Conversation Orchestrator Tests > should orchestrate Instagram conversation [3.24ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new AIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/ai.ts:87:17)\n      at getAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/ai.ts:510:25)\n      at new ConversationAIOrchestrator (1:17)\n      at getConversationAIOrchestrator (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/conversation-ai-orchestrator.ts:712:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:284:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:283:50)\n(fail) Instagram Integration Tests > Conversation Orchestrator Tests > should handle cross-platform context [4.13ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new InstagramAIService (1:17)\n      at getInstagramAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-ai.ts:875:34)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:319:25)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:318:56)\n(fail) Instagram Integration Tests > Error Handling Tests > should handle AI service errors gracefully [2.91ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new ServiceController (1:17)\n      at getServiceController (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/service-controller.ts:470:33)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:342:33)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:341:42)\n(fail) Instagram Integration Tests > Error Handling Tests > should record service errors [3.61ms]\n364 |   });\n365 | \n366 |   describe('Database Integration Tests', () => {\n367 |     beforeEach(async () => {\n368 |       // Clean up test conversations\n369 |       await sql`DELETE FROM conversations WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`;\n                  ^\nTypeError: undefined is not a function (near '...sql`DELETE FROM conversations WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:369:13)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:367:16)\n(fail) Instagram Integration Tests > Database Integration Tests > should create and track conversations [3.28ms]\n(fail) Instagram Integration Tests > Database Integration Tests > should create and track conversations\n364 |   });\n365 | \n366 |   describe('Database Integration Tests', () => {\n367 |     beforeEach(async () => {\n368 |       // Clean up test conversations\n369 |       await sql`DELETE FROM conversations WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`;\n                  ^\nTypeError: undefined is not a function (near '...sql`DELETE FROM conversations WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:369:13)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:367:16)\n(fail) Instagram Integration Tests > Database Integration Tests > should log AI interactions [5.80ms]\n(fail) Instagram Integration Tests > Database Integration Tests > should log AI interactions\n364 |   });\n365 | \n366 |   describe('Database Integration Tests', () => {\n367 |     beforeEach(async () => {\n368 |       // Clean up test conversations\n369 |       await sql`DELETE FROM conversations WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`;\n                  ^\nTypeError: undefined is not a function (near '...sql`DELETE FROM conversations WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:369:13)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:367:16)\n(fail) Instagram Integration Tests > Database Integration Tests > should enforce row-level security [4.11ms]\n(fail) Instagram Integration Tests > should enforce row-level security\n461 |     });\n462 |   });\n463 | \n464 |   describe('Webhook Router Tests', () => {\n465 |     beforeEach(async () => {\n466 |       await sql`DELETE FROM webhook_events WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`;\n                  ^\nTypeError: undefined is not a function (near '...sql`DELETE FROM webhook_events WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:466:13)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:465:16)\n(fail) Instagram Integration Tests > Webhook Router Tests > should prevent duplicate Instagram webhook processing [5.66ms]\n(fail) Instagram Integration Tests > Webhook Router Tests > should prevent duplicate Instagram webhook processing\n461 |     });\n462 |   });\n463 | \n464 |   describe('Webhook Router Tests', () => {\n465 |     beforeEach(async () => {\n466 |       await sql`DELETE FROM webhook_events WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`;\n                  ^\nTypeError: undefined is not a function (near '...sql`DELETE FROM webhook_events WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:466:13)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:465:16)\n(fail) Instagram Integration Tests > Webhook Router Tests > should respond with 429 when rate limit exceeded [5.69ms]\n(fail) Instagram Integration Tests > should respond with 429 when rate limit exceeded\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new InstagramAIService (1:17)\n      at getInstagramAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-ai.ts:875:34)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:533:25)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:532:50)\n(fail) Instagram Integration Tests > Performance Tests > should handle concurrent AI requests [4.37ms]\n557 | \n558 |     test('should optimize database queries', async () => {\n559 |       const startTime = Date.now();\n560 | \n561 |       // Test batch query performance\n562 |       const services = await sql`\n                                   ^\nTypeError: undefined is not a function (near '...sql`\n        SELECT \n          mss.service_name,\n          mss.enabled,\n          COALESCE(se.error_count, 0) as error_count\n        FROM merchant_service_status mss\n        LEFT JOIN service_errors se ON (\n          se.merchant_id = mss.merchant_id \n          AND se.service_name = mss.service_name\n          AND se.created_at::DATE = CURRENT_DATE\n        )\n        WHERE mss.merchant_id = ${TEST_MERCHANT_ID}::uuid\n      `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:562:30)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:558:46)\n(fail) Instagram Integration Tests > Performance Tests > should optimize database queries [6.85ms]\n\n# Unhandled error between tests\n-------------------------------\n72 |     await serviceController.enableInstagramServices(TEST_MERCHANT_ID, 'test-setup');\n73 |   });\n74 | \n75 |   afterAll(async () => {\n76 |     // Cleanup test data\n77 |     await sql`DELETE FROM merchants WHERE id = ${TEST_MERCHANT_ID}::uuid`;\n               ^\nTypeError: undefined is not a function (near '...sql`DELETE FROM merchants WHERE id = ${TEST_MERCHANT_ID}::uuid`...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:77:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:75:12)\n-------------------------------\n\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > GET /api/services/:merchantId/status - Status Retrieval Tests > should return all services status for merchant [6.20ms]\n(fail) Service Control API - Production Tests > GET /api/services/:merchantId/status - Status Retrieval Tests > should return all services status for merchant\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > GET /api/services/:merchantId/status - Status Retrieval Tests > should return 400 for invalid merchant ID format [6.79ms]\n(fail) Service Control API - Production Tests > should return 400 for invalid merchant ID format\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > GET /api/services/:merchantId/:service/status - Individual Service Status > should return specific service status [15.18ms]\n(fail) Service Control API - Production Tests > GET /api/services/:merchantId/:service/status - Individual Service Status > should return specific service status\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > GET /api/services/:merchantId/:service/status - Individual Service Status > should return 400 for invalid service name [8.26ms]\n(fail) Service Control API - Production Tests > should return 400 for invalid service name\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > POST /api/services/:merchantId/instagram/enable-all - Bulk Operations > should enable all Instagram services at once [7.67ms]\n(fail) Service Control API - Production Tests > should enable all Instagram services at once\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > POST /api/services/:merchantId/disable-all - Maintenance Mode > should disable all services for maintenance [14.83ms]\n(fail) Service Control API - Production Tests > should disable all services for maintenance\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > GET /api/services/:merchantId/health - Health Monitoring > should return health status for all services [6.25ms]\n(fail) Service Control API - Production Tests > should return health status for all services\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > GET /api/services/overview - Admin Overview > should return services overview for admin [3.57ms]\n(fail) Service Control API - Production Tests > should return services overview for admin\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > Rate Limiting Tests > should apply rate limiting after threshold [3.74ms]\n(fail) Service Control API - Production Tests > should apply rate limiting after threshold\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > Error Handling Tests > should handle database connection errors gracefully [3.20ms]\n(fail) Service Control API - Production Tests > Error Handling Tests > should handle database connection errors gracefully\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > Error Handling Tests > should validate request body completeness [5.32ms]\n(fail) Service Control API - Production Tests > Error Handling Tests > should validate request body completeness\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > Error Handling Tests > should handle malformed JSON [4.05ms]\n(fail) Service Control API - Production Tests > should handle malformed JSON\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > Audit and Logging Tests > should log service toggle actions [3.82ms]\n(fail) Service Control API - Production Tests > should log service toggle actions\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > Performance Tests > should handle concurrent toggle requests [4.17ms]\n(fail) Service Control API - Production Tests > Performance Tests > should handle concurrent toggle requests\n90 |     await cleanupTestMerchant(TEST_MERCHANT_ID);\n91 |   });\n92 | \n93 |   beforeEach(async () => {\n94 |     // Reset any modified states before each test\n95 |     await sql`\n               ^\nTypeError: undefined is not a function (near '...sql`\n      UPDATE merchant_service_status \n      SET enabled = CASE \n        WHEN service_name IN ('instagram', 'ai_processing', 'story_response', 'dm_processing') THEN true\n        ELSE false\n      END,\n      last_toggled = NOW(),\n      toggled_by = 'test-reset'\n      WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid\n    `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:95:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:93:14)\n(fail) Service Control API - Production Tests > Performance Tests > should complete status retrieval within performance threshold [4.72ms]\n(fail) Service Control API - Production Tests > should complete status retrieval within performance threshold\n\n# Unhandled error between tests\n-------------------------------\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at cleanupTestMerchant (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:605:14)\n      at cleanupTestMerchant (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:604:43)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:90:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/api/service-control.test.ts:88:12)\n-------------------------------\n\n\n 0 pass\n 59 fail\n 4 errors\nRan 59 tests across 1 file. [3.47s]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/services/monitoring.test.ts",
      "status": "failed",
      "duration": 361,
      "errors": [
        "Error: \nsrc/services/monitoring.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n1 | (function (entry, fetcher)\n              ^\nSyntaxError: Export named 'AlertManager' not found in module '/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/monitoring.ts'.\n      at loadAndEvaluateModule (1:11)\n-------------------------------\n\n\n 0 pass\n 1 fail\n 1 error\nRan 1 test across 1 file. [202.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/services/telemetry.test.ts",
      "status": "failed",
      "duration": 1002,
      "errors": [
        "Error: \nsrc/services/telemetry.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n13 |   type TelemetryEvent,\n14 |   type TelemetryMetric\n15 | } from './telemetry.js';\n16 | \n17 | // Mock dependencies\n18 | jest.mock('../database/connection.js', () => ({\n          ^\nTypeError: jest.mock is not a function. (In 'jest.mock(\"../database/connection.js\", () => ({\n  getDatabase: jest.fn(() => ({\n    getSQL: jest.fn(() => jest.fn())\n  }))\n}))', 'jest.mock' is undefined)\n      at /mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/telemetry.test.ts:18:6\n      at loadAndEvaluateModule (2:1)\n-------------------------------\n\n\n 0 pass\n 1 fail\n 1 error\nRan 1 test across 1 file. [833.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/services/logger.test.ts",
      "status": "failed",
      "duration": 380,
      "errors": [
        "Error: \nsrc/services/logger.test.ts:\n(pass) 📝 Logger Service Tests > Constructor and Configuration > ✅ should create logger with default settings [0.04ms]\n(pass) 📝 Logger Service Tests > Constructor and Configuration > ✅ should create logger with initial context [0.29ms]\n(pass) 📝 Logger Service Tests > Constructor and Configuration > ✅ should set log level from environment [0.05ms]\n(pass) 📝 Logger Service Tests > Constructor and Configuration > ✅ should default to info level for invalid log level [0.04ms]\n(pass) 📝 Logger Service Tests > Context Management > ✅ should set global context [0.08ms]\n(pass) 📝 Logger Service Tests > Context Management > ✅ should merge context in log calls [0.04ms]\n(pass) 📝 Logger Service Tests > Context Management > ✅ should clear specific context keys [0.05ms]\n(pass) 📝 Logger Service Tests > Context Management > ✅ should create child logger with inherited context [0.29ms]\n(pass) 📝 Logger Service Tests > Context Management > ✅ should isolate child logger changes [0.10ms]\n(pass) 📝 Logger Service Tests > Log Levels > ✅ should log trace messages [0.04ms]\n(pass) 📝 Logger Service Tests > Log Levels > ✅ should log debug messages [0.02ms]\n(pass) 📝 Logger Service Tests > Log Levels > ✅ should log info messages [0.02ms]\n(pass) 📝 Logger Service Tests > Log Levels > ✅ should log warn messages [0.03ms]\n(pass) 📝 Logger Service Tests > Log Levels > ✅ should log error messages to stderr [0.04ms]\n(pass) 📝 Logger Service Tests > Log Levels > ✅ should log fatal messages to stderr [0.03ms]\n216 |     test('✅ should log Error objects with stack traces', () => {\n217 |       const error = new Error('Test error');\n218 |       logger.error('Something went wrong', error);\n219 | \n220 |       const output = capturedErrors[0];\n221 |       expect(output).toContain('Test error');\n                           ^\nerror: expect(received).toContain(expected)\n\nExpected to contain: \"Test error\"\nReceived: \"2025-08-21T18:07:04.242Z ERROR Something went wrong {}\\n\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/logger.test.ts:221:22)\n(fail) 📝 Logger Service Tests > Error Handling > ✅ should log Error objects with stack traces [3.05ms]\n(pass) 📝 Logger Service Tests > Error Handling > ✅ should handle non-Error objects [0.14ms]\n(pass) 📝 Logger Service Tests > Error Handling > ✅ should handle string errors [0.06ms]\n(pass) 📝 Logger Service Tests > Error Handling > ✅ should handle null/undefined errors [0.04ms]\n(pass) 📝 Logger Service Tests > Level Filtering > ✅ should filter logs below minimum level [0.05ms]\n(pass) 📝 Logger Service Tests > Level Filtering > ✅ should allow all logs at trace level [0.05ms]\n286 |       });\n287 | \n288 |       const output = capturedOutput[0];\n289 |       expect(output).toContain('testuser');\n290 |       expect(output).not.toContain('supersecret123');\n291 |       expect(output).toContain('su*******23');\n                           ^\nerror: expect(received).toContain(expected)\n\nExpected to contain: \"su*******23\"\nReceived: \"2025-08-21T18:07:04.246Z INFO  User login {\\\"username\\\":\\\"testuser\\\",\\\"password\\\":\\\"su**********23\\\"}\\n\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/logger.test.ts:291:22)\n(fail) 📝 Logger Service Tests > Sensitive Data Redaction > ✅ should redact passwords [2.90ms]\n298 |       });\n299 | \n300 |       const output = capturedOutput[0];\n301 |       expect(output).toContain('/api/users');\n302 |       expect(output).not.toContain('sk-abcdef123456789');\n303 |       expect(output).toContain('sk***********89');\n                           ^\nerror: expect(received).toContain(expected)\n\nExpected to contain: \"sk***********89\"\nReceived: \"2025-08-21T18:07:04.249Z INFO  API call {\\\"endpoint\\\":\\\"/api/users\\\",\\\"api_key\\\":\\\"sk**************89\\\"}\\n\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/logger.test.ts:303:22)\n(fail) 📝 Logger Service Tests > Sensitive Data Redaction > ✅ should redact API keys [1.94ms]\n313 |       });\n314 | \n315 |       const output = capturedOutput[0];\n316 |       expect(output).toContain('application/json');\n317 |       expect(output).not.toContain('Bearer token123456');\n318 |       expect(output).not.toContain('secret-key');\n                               ^\nerror: expect(received).not.toContain(expected)\n\nExpected to not contain: \"secret-key\"\nReceived: \"2025-08-21T18:07:04.251Z INFO  Request {\\\"headers\\\":{\\\"Content-Type\\\":\\\"application/json\\\",\\\"Authorization\\\":\\\"Be**************56\\\",\\\"X-API-Key\\\":\\\"secret-key\\\"}}\\n\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/logger.test.ts:318:26)\n(fail) 📝 Logger Service Tests > Sensitive Data Redaction > ✅ should redact authorization headers [1.84ms]\n336 |       });\n337 | \n338 |       const output = capturedOutput[0];\n339 |       expect(output).toContain('123');\n340 |       expect(output).toContain('2024-01-01');\n341 |       expect(output).not.toContain('secret');\n                               ^\nerror: expect(received).not.toContain(expected)\n\nExpected to not contain: \"secret\"\nReceived: \"2025-08-21T18:07:04.253Z INFO  Nested data {\\\"user\\\":{\\\"id\\\":123,\\\"credentials\\\":{\\\"password\\\":\\\"se**et\\\",\\\"token\\\":\\\"ab**23\\\"}},\\\"metadata\\\":{\\\"timestamp\\\":\\\"2024-01-01\\\",\\\"secret\\\":\\\"hi**en\\\"}}\\n\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/logger.test.ts:341:26)\n(fail) 📝 Logger Service Tests > Sensitive Data Redaction > ✅ should handle nested objects [1.83ms]\n(pass) 📝 Logger Service Tests > Sensitive Data Redaction > ✅ should handle arrays with sensitive data [0.23ms]\n364 |         empty: '',\n365 |         medium: 'abcdef'\n366 |       });\n367 | \n368 |       const output = capturedOutput[0];\n369 |       expect(output).toContain('***'); // Short string\n                           ^\nerror: expect(received).toContain(expected)\n\nExpected to contain: \"***\"\nReceived: \"2025-08-21T18:07:04.255Z INFO  Short secrets {\\\"short\\\":\\\"abc\\\",\\\"empty\\\":\\\"\\\",\\\"medium\\\":\\\"abcdef\\\"}\\n\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/logger.test.ts:369:22)\n(fail) 📝 Logger Service Tests > Sensitive Data Redaction > ✅ should mask short strings appropriately [2.29ms]\n(pass) 📝 Logger Service Tests > Sensitive Data Redaction > ✅ should handle non-string sensitive values [0.21ms]\n(pass) 📝 Logger Service Tests > Output Formats > ✅ should output structured JSON in production [0.11ms]\n(pass) 📝 Logger Service Tests > Output Formats > ✅ should output human-readable format in development [0.09ms]\n418 |       error.stack = 'Error: Test error\\n    at test.js:1:1';\n419 | \n420 |       logger.error('Error occurred', error);\n421 | \n422 |       const output = capturedErrors[0];\n423 |       expect(output).toContain('Test error');\n                           ^\nerror: expect(received).toContain(expected)\n\nExpected to contain: \"Test error\"\nReceived: \"2025-08-21T18:07:04.258Z ERROR Error occurred {}\\n\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/logger.test.ts:423:22)\n(fail) 📝 Logger Service Tests > Output Formats > ✅ should include error details in output [2.35ms]\n(pass) 📝 Logger Service Tests > Global Logger Functions > ✅ should get global logger instance [0.09ms]\n(pass) 📝 Logger Service Tests > Global Logger Functions > ✅ should set context on global logger [0.08ms]\n(pass) 📝 Logger Service Tests > Global Logger Functions > ✅ should create new logger instance [0.06ms]\n(pass) 📝 Logger Service Tests > Request-Scoped Logging > ✅ should bind request logger with IDs [0.07ms]\n(pass) 📝 Logger Service Tests > Request-Scoped Logging > ✅ should create request logger with generated IDs [0.15ms]\n(pass) 📝 Logger Service Tests > Request-Scoped Logging > ✅ should create request logger with provided IDs [0.04ms]\n(pass) 📝 Logger Service Tests > Edge Cases > ✅ should handle null/undefined messages [0.03ms]\n506 |       circular.self = circular;\n507 | \n508 |       // Should not throw\n509 |       expect(() => {\n510 |         logger.info('circular test', circular);\n511 |       }).not.toThrow();\n                   ^\nerror: expect(received).not.toThrow()\n\nError name: \"RangeError\"\nError message: \"Maximum call stack size exceeded.\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/logger.test.ts:511:14)\n(fail) 📝 Logger Service Tests > Edge Cases > ✅ should handle circular references in context [15.40ms]\n(pass) 📝 Logger Service Tests > Edge Cases > ✅ should handle very large context objects [1.54ms]\n(pass) 📝 Logger Service Tests > Edge Cases > ✅ should handle empty context [0.09ms]\n(pass) 📝 Logger Service Tests > Edge Cases > ✅ should handle context with special characters [0.06ms]\n(pass) 📝 Logger Service Tests > Performance > ✅ should skip processing when log level filtered [0.46ms]\n(pass) 📝 Logger Service Tests > Performance > ✅ should handle concurrent logging [1.68ms]\n(pass) 📝 Logger Service Tests > Memory Management > ✅ should not leak memory with many child loggers [0.52ms]\n(pass) 📝 Logger Service Tests > Memory Management > ✅ should handle context clearing [0.06ms]\n632 |       });\n633 | \n634 |       const output = capturedOutput[0];\n635 |       expect(output).not.toContain('abcdef123456');\n636 |       expect(output).not.toContain('ghijkl789012');\n637 |       expect(output).toContain('sh**********56');\n                           ^\nerror: expect(received).toContain(expected)\n\nExpected to contain: \"sh**********56\"\nReceived: \"2025-08-21T18:07:04.283Z INFO  Webhook received {\\\"headers\\\":{\\\"x-hub-signature\\\":\\\"sh***************56\\\",\\\"x-hub-signature-256\\\":\\\"sh***************12\\\"}}\\n\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/logger.test.ts:637:22)\n(fail) 📝 Logger Service Tests > Security > ✅ should redact webhook signatures [2.05ms]\n(pass) 📝 Logger Service Tests > Security > ✅ should redact JWT tokens [0.09ms]\n(pass) 📝 Logger Service Tests > Security > ✅ should preserve non-sensitive data [0.07ms]\n\n9 tests failed:\n(fail) 📝 Logger Service Tests > Error Handling > ✅ should log Error objects with stack traces [3.05ms]\n(fail) 📝 Logger Service Tests > Sensitive Data Redaction > ✅ should redact passwords [2.90ms]\n(fail) 📝 Logger Service Tests > Sensitive Data Redaction > ✅ should redact API keys [1.94ms]\n(fail) 📝 Logger Service Tests > Sensitive Data Redaction > ✅ should redact authorization headers [1.84ms]\n(fail) 📝 Logger Service Tests > Sensitive Data Redaction > ✅ should handle nested objects [1.83ms]\n(fail) 📝 Logger Service Tests > Sensitive Data Redaction > ✅ should mask short strings appropriately [2.29ms]\n(fail) 📝 Logger Service Tests > Output Formats > ✅ should include error details in output [2.35ms]\n(fail) 📝 Logger Service Tests > Edge Cases > ✅ should handle circular references in context [15.40ms]\n(fail) 📝 Logger Service Tests > Security > ✅ should redact webhook signatures [2.05ms]\n\n 40 pass\n 9 fail\n 215 expect() calls\nRan 49 tests across 1 file. [231.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/services/utility-messages.test.ts",
      "status": "failed",
      "duration": 1963,
      "errors": [
        "Error: \nsrc/services/utility-messages.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n31 |   }))\n32 | }));\n33 | \n34 | jest.mock('../config/environment.js', () => ({\n35 |   getConfig: jest.fn(() => ({\n36 |     instagram: {\n         ^\nTypeError: jest.mock is not a function. (In 'jest.mock(\"./instagram-api.js\", () => ({\n  getInstagramClient: jest.fn(() => ({\n    loadMerchantCredentials: jest.fn(),\n    validateCredentials: jest.fn(),\n    sendMessage: jest.fn()\n  }))\n}))', 'jest.mock' is undefined)\n      at /mnt/c/Users/jaafa/Desktop/New folder (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/utility-messages.test.ts:36:5)\n-------------------------------\n\n\n 0 pass\n 1 fail\n 1 error\nRan 1 test across 1 file. [1.72s]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/services/encryption.test.ts",
      "status": "passed",
      "duration": 220,
      "coverage": 0
    },
    {
      "file": "src/services/CircuitBreaker.test.ts",
      "status": "failed",
      "duration": 2548,
      "errors": [
        "Error: \nsrc/services/CircuitBreaker.test.ts:\n73 | \n74 |   describe('Circuit Breaker Configuration Tests', () => {\n75 |     test('should initialize with default configuration', () => {\n76 |       circuitBreaker = new CircuitBreaker('test-service');\n77 | \n78 |       expect(circuitBreaker.getName()).toBe('test-service');\n                                 ^\nTypeError: circuitBreaker.getName is not a function. (In 'circuitBreaker.getName()', 'circuitBreaker.getName' is undefined)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:78:29)\n(fail) CircuitBreaker - Production Tests > Circuit Breaker Configuration Tests > should initialize with default configuration [3.34ms]\n90 |         monitoringPeriod: 120000\n91 |       };\n92 | \n93 |       circuitBreaker = new CircuitBreaker('custom-service', options);\n94 | \n95 |       expect(circuitBreaker.getName()).toBe('custom-service');\n                                 ^\nTypeError: circuitBreaker.getName is not a function. (In 'circuitBreaker.getName()', 'circuitBreaker.getName' is undefined)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:95:29)\n(fail) CircuitBreaker - Production Tests > Circuit Breaker Configuration Tests > should initialize with custom configuration [2.69ms]\n106 |     });\n107 | \n108 |     test('should allow successful calls in CLOSED state', async () => {\n109 |       const result = await circuitBreaker.execute(mockService.successfulCall);\n110 | \n111 |       expect(result.success).toBe(true);\n                                   ^\nerror: expect(received).toBe(expected)\n\nExpected: true\nReceived: false\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:111:30)\n(fail) CircuitBreaker - Production Tests > CLOSED State Behavior Tests > should allow successful calls in CLOSED state [3.93ms]\n117 | \n118 |     test('should track failures without opening circuit initially', async () => {\n119 |       // Make 2 failing calls (below threshold of 3)\n120 |       for (let i = 0; i < 2; i++) {\n121 |         await expect(circuitBreaker.execute(mockService.failingCall))\n122 |           .rejects.toThrow(`Service failure ${i + 1}`);\n                         ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:122:20)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:118:69)\n(fail) CircuitBreaker - Production Tests > CLOSED State Behavior Tests > should track failures without opening circuit initially [3.13ms]\n129 | \n130 |     test('should open circuit after reaching failure threshold', async () => {\n131 |       // Make 3 failing calls to reach threshold\n132 |       for (let i = 0; i < 3; i++) {\n133 |         await expect(circuitBreaker.execute(mockService.failingCall))\n134 |           .rejects.toThrow(`Service failure ${i + 1}`);\n                         ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:134:20)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:130:66)\n(fail) CircuitBreaker - Production Tests > CLOSED State Behavior Tests > should open circuit after reaching failure threshold [3.32ms]\n143 | \n144 |     test('should reset failure count on successful call', async () => {\n145 |       // Make 2 failing calls\n146 |       for (let i = 0; i < 2; i++) {\n147 |         await expect(circuitBreaker.execute(mockService.failingCall))\n148 |           .rejects.toThrow();\n                         ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:148:20)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:144:59)\n(fail) CircuitBreaker - Production Tests > CLOSED State Behavior Tests > should reset failure count on successful call [3.08ms]\n164 |         timeout: 100 // Very short timeout\n165 |       });\n166 | \n167 |       // First timeout\n168 |       await expect(circuitBreaker.execute(mockService.timeoutCall))\n169 |         .rejects.toThrow('Operation timed out');\n                       ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:169:18)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:161:46)\n(fail) CircuitBreaker - Production Tests > CLOSED State Behavior Tests > should handle timeout as failure [3.20ms]\n188 |       });\n189 | \n190 |       // Force circuit to open\n191 |       for (let i = 0; i < 2; i++) {\n192 |         await expect(circuitBreaker.execute(mockService.failingCall))\n193 |           .rejects.toThrow();\n                         ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:193:20)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:183:16)\n(fail) CircuitBreaker - Production Tests > OPEN State Behavior Tests > should reject calls immediately in OPEN state [3.14ms]\n(fail) CircuitBreaker - Production Tests > OPEN State Behavior Tests > should reject calls immediately in OPEN state\n188 |       });\n189 | \n190 |       // Force circuit to open\n191 |       for (let i = 0; i < 2; i++) {\n192 |         await expect(circuitBreaker.execute(mockService.failingCall))\n193 |           .rejects.toThrow();\n                         ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:193:20)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:183:16)\n(fail) CircuitBreaker - Production Tests > OPEN State Behavior Tests > should provide circuit breaker error details [2.81ms]\n(fail) CircuitBreaker - Production Tests > OPEN State Behavior Tests > should provide circuit breaker error details\n188 |       });\n189 | \n190 |       // Force circuit to open\n191 |       for (let i = 0; i < 2; i++) {\n192 |         await expect(circuitBreaker.execute(mockService.failingCall))\n193 |           .rejects.toThrow();\n                         ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:193:20)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:183:16)\n(fail) CircuitBreaker - Production Tests > OPEN State Behavior Tests > should transition to HALF_OPEN after recovery timeout [3.41ms]\n(fail) CircuitBreaker - Production Tests > OPEN State Behavior Tests > should transition to HALF_OPEN after recovery timeout\n188 |       });\n189 | \n190 |       // Force circuit to open\n191 |       for (let i = 0; i < 2; i++) {\n192 |         await expect(circuitBreaker.execute(mockService.failingCall))\n193 |           .rejects.toThrow();\n                         ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:193:20)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:183:16)\n(fail) CircuitBreaker - Production Tests > OPEN State Behavior Tests > should remain OPEN if recovery call fails [2.82ms]\n(fail) CircuitBreaker - Production Tests > should remain OPEN if recovery call fails\n252 |       });\n253 | \n254 |       // Open circuit\n255 |       for (let i = 0; i < 2; i++) {\n256 |         await expect(circuitBreaker.execute(mockService.failingCall))\n257 |           .rejects.toThrow();\n                         ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:257:20)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:247:16)\n(fail) CircuitBreaker - Production Tests > HALF_OPEN State Behavior Tests > should allow single test call in HALF_OPEN state [2.98ms]\n(fail) CircuitBreaker - Production Tests > HALF_OPEN State Behavior Tests > should allow single test call in HALF_OPEN state\n252 |       });\n253 | \n254 |       // Open circuit\n255 |       for (let i = 0; i < 2; i++) {\n256 |         await expect(circuitBreaker.execute(mockService.failingCall))\n257 |           .rejects.toThrow();\n                         ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:257:20)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:247:16)\n(fail) CircuitBreaker - Production Tests > HALF_OPEN State Behavior Tests > should close circuit on successful recovery [2.88ms]\n(fail) CircuitBreaker - Production Tests > HALF_OPEN State Behavior Tests > should close circuit on successful recovery\n252 |       });\n253 | \n254 |       // Open circuit\n255 |       for (let i = 0; i < 2; i++) {\n256 |         await expect(circuitBreaker.execute(mockService.failingCall))\n257 |           .rejects.toThrow();\n                         ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:257:20)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:247:16)\n(fail) CircuitBreaker - Production Tests > HALF_OPEN State Behavior Tests > should reopen circuit on failed recovery [3.08ms]\n(fail) CircuitBreaker - Production Tests > should reopen circuit on failed recovery\n310 |     });\n311 | \n312 |     test('should track comprehensive statistics', async () => {\n313 |       // Make mixed calls\n314 |       await circuitBreaker.execute(mockService.successfulCall);\n315 |       await expect(circuitBreaker.execute(mockService.failingCall)).rejects.toThrow();\n                                                                                  ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:315:77)\n(fail) CircuitBreaker - Production Tests > Statistics and Monitoring Tests > should track comprehensive statistics [3.17ms]\n328 | \n329 |     test('should track rejected calls in OPEN state', async () => {\n330 |       // Open circuit\n331 |       for (let i = 0; i < 3; i++) {\n332 |         await expect(circuitBreaker.execute(mockService.failingCall))\n333 |           .rejects.toThrow();\n                         ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:333:20)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:329:55)\n(fail) CircuitBreaker - Production Tests > Statistics and Monitoring Tests > should track rejected calls in OPEN state [3.00ms]\n351 |         timeout: 100\n352 |       });\n353 | \n354 |       // Make timeout calls\n355 |       await expect(circuitBreaker.execute(mockService.timeoutCall))\n356 |         .rejects.toThrow('Operation timed out');\n                       ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:356:18)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:348:51)\n(fail) CircuitBreaker - Production Tests > Statistics and Monitoring Tests > should track timeout calls separately [2.56ms]\n369 |         await circuitBreaker.execute(mockService.successfulCall);\n370 |       }\n371 | \n372 |       for (let i = 0; i < 2; i++) {\n373 |         await expect(circuitBreaker.execute(mockService.failingCall))\n374 |           .rejects.toThrow();\n                         ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:374:20)\n(fail) CircuitBreaker - Production Tests > Statistics and Monitoring Tests > should calculate error rate correctly [2.99ms]\n398 |       });\n399 | \n400 |       // Simulate API failures\n401 |       for (let i = 0; i < 3; i++) {\n402 |         await expect(instagramAPI.execute(() => mockInstagramCall('failing-endpoint')))\n403 |           .rejects.toThrow('Instagram API rate limit exceeded');\n                         ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:403:20)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:386:66)\n(fail) CircuitBreaker - Production Tests > Integration and Real-world Scenarios > should handle Instagram API service failure scenario [4.44ms]\n425 |         return { response: `AI response to: ${prompt}` };\n426 |       });\n427 | \n428 |       // Cause timeouts to open circuit\n429 |       await expect(aiService.execute(() => mockAICall('complex prompt 1')))\n430 |         .rejects.toThrow('Operation timed out');\n                       ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:430:18)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:413:55)\n(fail) CircuitBreaker - Production Tests > Integration and Real-world Scenarios > should handle AI service timeout scenario [2007.48ms]\n453 |         return { rows: [`Result for: ${query}`] };\n454 |       });\n455 | \n456 |       // Cause failures to open circuit\n457 |       await expect(dbService.execute(() => mockDbCall('SELECT 1')))\n458 |         .rejects.toThrow('Database connection lost');\n                       ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:458:18)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:441:64)\n(fail) CircuitBreaker - Production Tests > Integration and Real-world Scenarios > should handle database connection failure recovery [4.19ms]\n483 |       });\n484 |     });\n485 | \n486 |     test('should handle null/undefined function gracefully', async () => {\n487 |       await expect(circuitBreaker.execute(null as any))\n488 |         .rejects.toThrow('Function is required');\n                       ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:488:18)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:486:62)\n(fail) CircuitBreaker - Production Tests > Error Handling and Edge Cases > should handle null/undefined function gracefully [3.74ms]\n491 |         .rejects.toThrow('Function is required');\n492 |     });\n493 | \n494 |     test('should handle non-function arguments', async () => {\n495 |       await expect(circuitBreaker.execute('not a function' as any))\n496 |         .rejects.toThrow('Function is required');\n                       ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:496:18)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:494:50)\n(fail) CircuitBreaker - Production Tests > Error Handling and Edge Cases > should handle non-function arguments [3.78ms]\n510 | \n511 |       try {\n512 |         await circuitBreaker.execute(failingService);\n513 |         expect.unreachable('Should have thrown error');\n514 |       } catch (error: any) {\n515 |         expect(error.message).toBe('Original service error');\n                                    ^\nerror: expect(received).toBe(expected)\n\nExpected: \"Original service error\"\nReceived: \"Should have thrown error\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:515:31)\n(fail) CircuitBreaker - Production Tests > Error Handling and Edge Cases > should preserve original error information [4.47ms]\n526 |         timeout: 1000\n527 |       });\n528 | \n529 |       // Open circuit quickly\n530 |       await expect(rapidCircuit.execute(mockService.failingCall))\n531 |         .rejects.toThrow();\n                       ^\nerror: \n\nExpected promise that rejects\nReceived promise that resolved: Promise { <resolved> }\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:531:18)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:521:61)\n(fail) CircuitBreaker - Production Tests > Error Handling and Edge Cases > should handle rapid state transitions correctly [3.39ms]\n559 |       );\n560 | \n561 |       const results = await Promise.all(promises);\n562 | \n563 |       expect(results.length).toBe(50);\n564 |       expect(concurrentCircuit.getStats().totalCalls).toBe(50);\n                                                            ^\nerror: expect(received).toBe(expected)\n\nExpected: 50\nReceived: undefined\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:564:55)\n(fail) CircuitBreaker - Production Tests > Performance and Load Tests > should handle high concurrency without race conditions [104.00ms]\n581 |       const totalTime = Date.now() - startTime;\n582 |       const averageCallTime = totalTime / 100;\n583 | \n584 |       // Should maintain reasonable performance\n585 |       expect(averageCallTime).toBeLessThan(50); // Less than 50ms per call on average\n586 |       expect(loadTestCircuit.getStats().totalCalls).toBe(100);\n                                                          ^\nerror: expect(received).toBe(expected)\n\nExpected: 100\nReceived: undefined\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/CircuitBreaker.test.ts:586:53)\n(fail) CircuitBreaker - Production Tests > Performance and Load Tests > should maintain performance under load [6.73ms]\n\n 0 pass\n 34 fail\n 27 expect() calls\nRan 34 tests across 1 file. [2.39s]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/errors/RedisErrors.test.ts",
      "status": "failed",
      "duration": 334,
      "errors": [
        "Error: \nsrc/errors/RedisErrors.test.ts:\n55 |       expect(error.message).toBe('Test error message');\n56 |       expect(error.code).toBe('TEST_ERROR');\n57 |       expect(error.context).toEqual(context);\n58 |       expect(error.timestamp).toBeInstanceOf(Date);\n59 |       expect(error.name).toBe('TestRedisError');\n60 |       expect(error.stack).toContain('Caused by:');\n                               ^\nerror: expect(received).toContain(expected)\n\nExpected to contain: \"Caused by:\"\nReceived: \"TestRedisError: Test error message\\n    at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/errors/RedisErrors.test.ts:53:25)\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/errors/RedisErrors.test.ts:60:27)\n(fail) Redis Errors - أخطاء Redis > RedisBaseError - الخطأ الأساسي > should create base error with required properties [2.99ms]\n(pass) Redis Errors - أخطاء Redis > RedisBaseError - الخطأ الأساسي > should serialize to JSON correctly [0.21ms]\n(pass) Redis Errors - أخطاء Redis > RedisBaseError - الخطأ الأساسي > should capture stack trace correctly [0.09ms]\n(pass) Redis Errors - أخطاء Redis > RedisBaseError - الخطأ الأساسي > should handle missing context and cause [0.05ms]\n(pass) Redis Errors - أخطاء Redis > Specific Error Types - أنواع الأخطاء المحددة > should create RedisConnectionError with correct code [0.04ms]\n(pass) Redis Errors - أخطاء Redis > Specific Error Types - أنواع الأخطاء المحددة > should create RedisValidationError with correct code [0.03ms]\n(pass) Redis Errors - أخطاء Redis > Specific Error Types - أنواع الأخطاء المحددة > should create RedisHealthCheckError with correct code [0.03ms]\n(pass) Redis Errors - أخطاء Redis > Specific Error Types - أنواع الأخطاء المحددة > should create RedisMetricsError with correct code [0.02ms]\n(pass) Redis Errors - أخطاء Redis > Specific Error Types - أنواع الأخطاء المحددة > should create RedisQueueError with correct code [0.03ms]\n(pass) Redis Errors - أخطاء Redis > Specific Error Types - أنواع الأخطاء المحددة > should create RedisConfigurationError with correct code [0.02ms]\n(pass) Redis Errors - أخطاء Redis > Specific Error Types - أنواع الأخطاء المحددة > should create RedisTimeoutError with correct code [0.02ms]\n(pass) Redis Errors - أخطاء Redis > Specific Error Types - أنواع الأخطاء المحددة > should create RedisCircuitBreakerError with correct code [0.02ms]\n(pass) Redis Errors - أخطاء Redis > Specific Error Types - أنواع الأخطاء المحددة > should create RedisAuthenticationError with correct code [0.02ms]\n(pass) Redis Errors - أخطاء Redis > Specific Error Types - أنواع الأخطاء المحددة > should create RedisNetworkError with correct code [0.02ms]\n(pass) Redis Errors - أخطاء Redis > Specific Error Types - أنواع الأخطاء المحددة > should create RedisMemoryError with correct code [0.02ms]\n(pass) Redis Errors - أخطاء Redis > Specific Error Types - أنواع الأخطاء المحددة > should create RedisRateLimitError with correct code [0.02ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create connection error from ECONNREFUSED [0.10ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create connection error from ENOTFOUND [0.03ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create authentication error from NOAUTH [0.02ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create authentication error from AUTH message [0.03ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create timeout error from TIMEOUT code [0.02ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create timeout error from timeout message [0.02ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create network error from ECONNRESET [0.02ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create network error from EPIPE [0.02ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create memory error from OOM message [0.02ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create memory error from memory message [0.02ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create rate limit error from limit message [0.02ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create default connection error for unknown errors [0.03ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create validation error with field information [0.04ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create validation error without expected type [0.02ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create health check error with details [0.03ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorFactory - مصنع الأخطاء > should create queue error with operation details [0.04ms]\n(pass) Redis Errors - أخطاء Redis > Type Guards - حراس الأنواع > should identify Redis errors correctly [0.04ms]\n(pass) Redis Errors - أخطاء Redis > Type Guards - حراس الأنواع > should identify connection errors correctly [0.51ms]\n(pass) Redis Errors - أخطاء Redis > Type Guards - حراس الأنواع > should identify validation errors correctly [0.08ms]\n(pass) Redis Errors - أخطاء Redis > Type Guards - حراس الأنواع > should identify timeout errors correctly [0.08ms]\n(pass) Redis Errors - أخطاء Redis > Type Guards - حراس الأنواع > should identify authentication errors correctly [0.05ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorHandler - معالج الأخطاء > should handle Redis errors directly [0.08ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorHandler - معالج الأخطاء > should convert regular errors to Redis errors [0.07ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorHandler - معالج الأخطاء > should handle unknown error types [0.03ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorHandler - معالج الأخطاء > should work without logger [0.07ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorHandler - معالج الأخطاء > should determine retry eligibility correctly [0.07ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorHandler - معالج الأخطاء > should calculate retry delays for timeout errors [0.11ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorHandler - معالج الأخطاء > should calculate retry delays for connection errors [0.02ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorHandler - معالج الأخطاء > should calculate linear retry delays for other errors [0.04ms]\n(pass) Redis Errors - أخطاء Redis > RedisErrorHandler - معالج الأخطاء > should cap retry delays at maximum [0.02ms]\n(pass) Redis Errors - أخطاء Redis > Error Context and Metadata - سياق الأخطاء والبيانات الوصفية > should preserve error context through factory creation [0.05ms]\n(pass) Redis Errors - أخطاء Redis > Error Context and Metadata - سياق الأخطاء والبيانات الوصفية > should track error timestamps [0.02ms]\n581 |     test('should maintain error chains with cause', () => {\n582 |       const rootCause = new Error('Root cause error');\n583 |       const networkError = new Error('Network layer error');\n584 |       const redisError = new RedisConnectionError('Redis connection failed', {}, networkError);\n585 | \n586 |       expect(redisError.stack).toContain('Caused by:');\n                                     ^\nerror: expect(received).toContain(expected)\n\nExpected to contain: \"Caused by:\"\nReceived: \"RedisConnectionError: Redis connection failed\\n    at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/errors/RedisErrors.test.ts:584:30)\"\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/errors/RedisErrors.test.ts:586:32)\n(fail) Redis Errors - أخطاء Redis > Error Context and Metadata - سياق الأخطاء والبيانات الوصفية > should maintain error chains with cause [3.13ms]\n607 | \n608 |       const error = new RedisConnectionError('Complex error', complexContext);\n609 |       const json = error.toJSON();\n610 | \n611 |       expect(json.context).toEqual(complexContext);\n612 |       expect(JSON.stringify(json)).not.toThrow();\n                                             ^\nerror: Expected value must be a function\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/errors/RedisErrors.test.ts:612:40)\n(fail) Redis Errors - أخطاء Redis > Error Context and Metadata - سياق الأخطاء والبيانات الوصفية > should serialize complex context correctly [3.25ms]\n(pass) Redis Errors - أخطاء Redis > Error Recovery Scenarios - سيناريوهات استرداد الأخطاء > should handle cascading error scenarios [0.19ms]\n(pass) Redis Errors - أخطاء Redis > Error Recovery Scenarios - سيناريوهات استرداد الأخطاء > should handle memory pressure scenarios [0.06ms]\n(pass) Redis Errors - أخطاء Redis > Error Recovery Scenarios - سيناريوهات استرداد الأخطاء > should handle rate limiting scenarios [0.05ms]\n(pass) Redis Errors - أخطاء Redis > Integration with Real Redis Errors - التكامل مع أخطاء Redis الحقيقية > should handle real IORedis connection errors [0.07ms]\n(pass) Redis Errors - أخطاء Redis > Integration with Real Redis Errors - التكامل مع أخطاء Redis الحقيقية > should handle Redis AUTH errors [0.05ms]\n(pass) Redis Errors - أخطاء Redis > Integration with Real Redis Errors - التكامل مع أخطاء Redis الحقيقية > should handle Redis cluster errors [0.05ms]\n\n3 tests failed:\n(fail) Redis Errors - أخطاء Redis > RedisBaseError - الخطأ الأساسي > should create base error with required properties [2.99ms]\n(fail) Redis Errors - أخطاء Redis > Error Context and Metadata - سياق الأخطاء والبيانات الوصفية > should maintain error chains with cause [3.13ms]\n(fail) Redis Errors - أخطاء Redis > Error Context and Metadata - سياق الأخطاء والبيانات الوصفية > should serialize complex context correctly [3.25ms]\n\n 53 pass\n 3 fail\n 134 expect() calls\nRan 56 tests across 1 file. [185.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/tests/analytics-processing.test.ts",
      "status": "failed",
      "duration": 403,
      "errors": [
        "Error: \nsrc/tests/analytics-processing.test.ts:\n204 |       }\n205 |     }\n206 | \n207 |   // Throw if validation failed\n208 |   if (errors.length > 0) {\n209 |     throw new EnvironmentValidationError(errors);\n                                                     ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:48)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new AnalyticsService (1:17)\n      at getAnalyticsService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/analytics-service.ts:65:32)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/analytics-processing.test.ts:15:23)\n(fail) ANALYTICS_PROCESSING handler > records analytics event and returns total count [3.13ms]\n(fail) records analytics event and returns total count\n\n 0 pass\n 2 fail\nRan 2 tests across 1 file. [251.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/tests/hashtag-growth.test.ts",
      "status": "failed",
      "duration": 525,
      "errors": [
        "Error: \nsrc/tests/hashtag-growth.test.ts:\nError calculating hashtag growth: 732 |     timeframe: 'day' | 'week' | 'month'\n733 |   ): Promise<number> {\n734 |     try {\n735 |       const sql: Sql = this.db.getSQL();\n736 |       const intervalValue = TIMEFRAME_INTERVALS[timeframe] || TIMEFRAME_INTERVALS.week;\n737 |       const result = await sql`\n                                 ^\nTypeError: Object is not a function (near '...sql`\n        SELECT\n          COUNT(*) FILTER (WHERE created_at >= NOW() - ${intervalValue}::interval) AS current_count,\n          COUNT(*) FILTER (\n            WHERE created_at >= NOW() - ${intervalValue}::interval * 2\n              AND created_at < NOW() - ${intervalValue}::interval\n          ) AS previous_count\n        FROM hashtag_mentions\n        WHERE hashtag = ${hashtag}\n          AND merchant_id = ${merchantId}::uuid\n      `...')\n      at calculateHashtagGrowth (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-hashtag-mention-processor.ts:737:28)\n      at calculateHashtagGrowth (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-hashtag-mention-processor.ts:730:5)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/hashtag-growth.test.ts:15:101)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/hashtag-growth.test.ts:13:46)\n\n16 |       ctx,\n17 |       '#test',\n18 |       'merchant',\n19 |       'week'\n20 |     );\n21 |     expect(growth).toBeCloseTo(50);\n                        ^\nerror: expect(received).toBeCloseTo(expected, precision)\n\nExpected: 50\nReceived: 0\n\nExpected precision: 2\nExpected difference: < 0.005\nReceived difference: 50\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/hashtag-growth.test.ts:21:20)\n(fail) calculateHashtagGrowth > returns positive growth percentage [4.72ms]\nError calculating hashtag growth: 732 |     timeframe: 'day' | 'week' | 'month'\n733 |   ): Promise<number> {\n734 |     try {\n735 |       const sql: Sql = this.db.getSQL();\n736 |       const intervalValue = TIMEFRAME_INTERVALS[timeframe] || TIMEFRAME_INTERVALS.week;\n737 |       const result = await sql`\n                                 ^\nTypeError: Object is not a function (near '...sql`\n        SELECT\n          COUNT(*) FILTER (WHERE created_at >= NOW() - ${intervalValue}::interval) AS current_count,\n          COUNT(*) FILTER (\n            WHERE created_at >= NOW() - ${intervalValue}::interval * 2\n              AND created_at < NOW() - ${intervalValue}::interval\n          ) AS previous_count\n        FROM hashtag_mentions\n        WHERE hashtag = ${hashtag}\n          AND merchant_id = ${merchantId}::uuid\n      `...')\n      at calculateHashtagGrowth (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-hashtag-mention-processor.ts:737:28)\n      at calculateHashtagGrowth (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-hashtag-mention-processor.ts:730:5)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/hashtag-growth.test.ts:26:101)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/hashtag-growth.test.ts:24:46)\n\n27 |       ctx,\n28 |       '#test',\n29 |       'merchant',\n30 |       'week'\n31 |     );\n32 |     expect(growth).toBeCloseTo(-50);\n                        ^\nerror: expect(received).toBeCloseTo(expected, precision)\n\nExpected: -50\nReceived: 0\n\nExpected precision: 2\nExpected difference: < 0.005\nReceived difference: 50\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/hashtag-growth.test.ts:32:20)\n(fail) calculateHashtagGrowth > returns negative growth percentage [5.14ms]\nError calculating hashtag growth: 732 |     timeframe: 'day' | 'week' | 'month'\n733 |   ): Promise<number> {\n734 |     try {\n735 |       const sql: Sql = this.db.getSQL();\n736 |       const intervalValue = TIMEFRAME_INTERVALS[timeframe] || TIMEFRAME_INTERVALS.week;\n737 |       const result = await sql`\n                                 ^\nTypeError: Object is not a function (near '...sql`\n        SELECT\n          COUNT(*) FILTER (WHERE created_at >= NOW() - ${intervalValue}::interval) AS current_count,\n          COUNT(*) FILTER (\n            WHERE created_at >= NOW() - ${intervalValue}::interval * 2\n              AND created_at < NOW() - ${intervalValue}::interval\n          ) AS previous_count\n        FROM hashtag_mentions\n        WHERE hashtag = ${hashtag}\n          AND merchant_id = ${merchantId}::uuid\n      `...')\n      at calculateHashtagGrowth (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-hashtag-mention-processor.ts:737:28)\n      at calculateHashtagGrowth (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-hashtag-mention-processor.ts:730:5)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/hashtag-growth.test.ts:37:101)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/hashtag-growth.test.ts:35:39)\n\n38 |       ctx,\n39 |       '#test',\n40 |       'merchant',\n41 |       'week'\n42 |     );\n43 |     expect(growth).toBe(100);\n                        ^\nerror: expect(received).toBe(expected)\n\nExpected: 100\nReceived: 0\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/hashtag-growth.test.ts:43:20)\n(fail) calculateHashtagGrowth > handles zero previous count [4.34ms]\nError calculating hashtag growth: 732 |     timeframe: 'day' | 'week' | 'month'\n733 |   ): Promise<number> {\n734 |     try {\n735 |       const sql: Sql = this.db.getSQL();\n736 |       const intervalValue = TIMEFRAME_INTERVALS[timeframe] || TIMEFRAME_INTERVALS.week;\n737 |       const result = await sql`\n                                 ^\nTypeError: Object is not a function (near '...sql`\n        SELECT\n          COUNT(*) FILTER (WHERE created_at >= NOW() - ${intervalValue}::interval) AS current_count,\n          COUNT(*) FILTER (\n            WHERE created_at >= NOW() - ${intervalValue}::interval * 2\n              AND created_at < NOW() - ${intervalValue}::interval\n          ) AS previous_count\n        FROM hashtag_mentions\n        WHERE hashtag = ${hashtag}\n          AND merchant_id = ${merchantId}::uuid\n      `...')\n      at calculateHashtagGrowth (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-hashtag-mention-processor.ts:737:28)\n      at calculateHashtagGrowth (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-hashtag-mention-processor.ts:730:5)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/hashtag-growth.test.ts:48:101)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/hashtag-growth.test.ts:46:42)\n\n(pass) calculateHashtagGrowth > returns 0 when no data present [2.09ms]\n\n 1 pass\n 3 fail\n 2 expect() calls\nRan 4 tests across 1 file. [344.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/tests/idempotency.middleware.test.ts",
      "status": "passed",
      "duration": 286,
      "coverage": 0
    },
    {
      "file": "src/tests/input-sanitization.test.ts",
      "status": "passed",
      "duration": 1013,
      "coverage": 0
    },
    {
      "file": "src/tests/instagram-integration.test.ts",
      "status": "failed",
      "duration": 943,
      "errors": [
        "Error: \nsrc/tests/instagram-integration.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at initializeDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:438:14)\n      at initializeDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:437:41)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:52:16)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:50:13)\n-------------------------------\n\n(fail) Instagram Integration Tests > Service Control Tests > should get service status\n(fail) Instagram Integration Tests > Service Control Tests > should toggle service on/off\n(fail) Instagram Integration Tests > Service Control Tests > should get all services status\n(fail) Instagram Integration Tests > Service Control Tests > should get services health\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new InstagramAIService (1:17)\n      at getInstagramAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-ai.ts:875:34)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:148:25)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:147:51)\n(fail) Instagram Integration Tests > Instagram AI Service Tests > should generate Instagram DM response [4.30ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new InstagramAIService (1:17)\n      at getInstagramAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-ai.ts:875:34)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:181:25)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:180:50)\n(fail) Instagram Integration Tests > Instagram AI Service Tests > should generate story reply response [2.38ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new InstagramAIService (1:17)\n      at getInstagramAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-ai.ts:875:34)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:205:25)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:204:46)\n(fail) Instagram Integration Tests > Instagram AI Service Tests > should generate comment response [3.41ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new InstagramAIService (1:17)\n      at getInstagramAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-ai.ts:875:34)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:228:25)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:227:49)\n(fail) Instagram Integration Tests > Instagram AI Service Tests > should generate hashtag suggestions [3.06ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new AIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/ai.ts:87:17)\n      at getAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/ai.ts:510:25)\n      at new ConversationAIOrchestrator (1:17)\n      at getConversationAIOrchestrator (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/conversation-ai-orchestrator.ts:712:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:254:28)\n(fail) Instagram Integration Tests > Conversation Orchestrator Tests > should orchestrate Instagram conversation [2.80ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new AIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/ai.ts:87:17)\n      at getAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/ai.ts:510:25)\n      at new ConversationAIOrchestrator (1:17)\n      at getConversationAIOrchestrator (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/conversation-ai-orchestrator.ts:712:28)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:284:28)\n(fail) Instagram Integration Tests > Conversation Orchestrator Tests > should handle cross-platform context [3.00ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new InstagramAIService (1:17)\n      at getInstagramAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-ai.ts:875:34)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:319:25)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:318:56)\n(fail) Instagram Integration Tests > Error Handling Tests > should handle AI service errors gracefully [2.69ms]\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new ServiceController (1:17)\n      at getServiceController (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/service-controller.ts:470:33)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:342:33)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:341:42)\n(fail) Instagram Integration Tests > Error Handling Tests > should record service errors [2.66ms]\n364 |   });\n365 | \n366 |   describe('Database Integration Tests', () => {\n367 |     beforeEach(async () => {\n368 |       // Clean up test conversations\n369 |       await sql`DELETE FROM conversations WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`;\n                  ^\nTypeError: undefined is not a function (near '...sql`DELETE FROM conversations WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:369:13)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:367:16)\n(fail) Instagram Integration Tests > Database Integration Tests > should create and track conversations [3.49ms]\n(fail) Instagram Integration Tests > Database Integration Tests > should create and track conversations\n364 |   });\n365 | \n366 |   describe('Database Integration Tests', () => {\n367 |     beforeEach(async () => {\n368 |       // Clean up test conversations\n369 |       await sql`DELETE FROM conversations WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`;\n                  ^\nTypeError: undefined is not a function (near '...sql`DELETE FROM conversations WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:369:13)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:367:16)\n(fail) Instagram Integration Tests > Database Integration Tests > should log AI interactions [2.57ms]\n(fail) Instagram Integration Tests > Database Integration Tests > should log AI interactions\n364 |   });\n365 | \n366 |   describe('Database Integration Tests', () => {\n367 |     beforeEach(async () => {\n368 |       // Clean up test conversations\n369 |       await sql`DELETE FROM conversations WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`;\n                  ^\nTypeError: undefined is not a function (near '...sql`DELETE FROM conversations WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:369:13)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:367:16)\n(fail) Instagram Integration Tests > Database Integration Tests > should enforce row-level security [3.06ms]\n(fail) Instagram Integration Tests > should enforce row-level security\n461 |     });\n462 |   });\n463 | \n464 |   describe('Webhook Router Tests', () => {\n465 |     beforeEach(async () => {\n466 |       await sql`DELETE FROM webhook_events WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`;\n                  ^\nTypeError: undefined is not a function (near '...sql`DELETE FROM webhook_events WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:466:13)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:465:16)\n(fail) Instagram Integration Tests > Webhook Router Tests > should prevent duplicate Instagram webhook processing [3.29ms]\n(fail) Instagram Integration Tests > Webhook Router Tests > should prevent duplicate Instagram webhook processing\n461 |     });\n462 |   });\n463 | \n464 |   describe('Webhook Router Tests', () => {\n465 |     beforeEach(async () => {\n466 |       await sql`DELETE FROM webhook_events WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`;\n                  ^\nTypeError: undefined is not a function (near '...sql`DELETE FROM webhook_events WHERE merchant_id = ${TEST_MERCHANT_ID}::uuid`...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:466:13)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:465:16)\n(fail) Instagram Integration Tests > Webhook Router Tests > should respond with 429 when rate limit exceeded [2.92ms]\n(fail) Instagram Integration Tests > should respond with 429 when rate limit exceeded\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new InstagramAIService (1:17)\n      at getInstagramAIService (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/services/instagram-ai.ts:875:34)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:533:25)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:532:50)\n(fail) Instagram Integration Tests > Performance Tests > should handle concurrent AI requests [3.70ms]\n557 | \n558 |     test('should optimize database queries', async () => {\n559 |       const startTime = Date.now();\n560 | \n561 |       // Test batch query performance\n562 |       const services = await sql`\n                                   ^\nTypeError: undefined is not a function (near '...sql`\n        SELECT \n          mss.service_name,\n          mss.enabled,\n          COALESCE(se.error_count, 0) as error_count\n        FROM merchant_service_status mss\n        LEFT JOIN service_errors se ON (\n          se.merchant_id = mss.merchant_id \n          AND se.service_name = mss.service_name\n          AND se.created_at::DATE = CURRENT_DATE\n        )\n        WHERE mss.merchant_id = ${TEST_MERCHANT_ID}::uuid\n      `...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:562:30)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:558:46)\n(fail) Instagram Integration Tests > Performance Tests > should optimize database queries [3.03ms]\n\n# Unhandled error between tests\n-------------------------------\n72 |     await serviceController.enableInstagramServices(TEST_MERCHANT_ID, 'test-setup');\n73 |   });\n74 | \n75 |   afterAll(async () => {\n76 |     // Cleanup test data\n77 |     await sql`DELETE FROM merchants WHERE id = ${TEST_MERCHANT_ID}::uuid`;\n               ^\nTypeError: undefined is not a function (near '...sql`DELETE FROM merchants WHERE id = ${TEST_MERCHANT_ID}::uuid`...')\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:77:11)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-integration.test.ts:75:12)\n-------------------------------\n\n\n 0 pass\n 24 fail\n 2 errors\nRan 24 tests across 1 file. [709.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/tests/instagram-media-manager.test.ts",
      "status": "passed",
      "duration": 562,
      "coverage": 0
    },
    {
      "file": "src/tests/instagram-message-sender.test.ts",
      "status": "passed",
      "duration": 297,
      "coverage": 0
    },
    {
      "file": "src/tests/instagram-messaging.test.ts",
      "status": "passed",
      "duration": 2007,
      "coverage": 0
    },
    {
      "file": "src/tests/instagram-oauth.test.ts",
      "status": "passed",
      "duration": 1119,
      "coverage": 0
    },
    {
      "file": "src/tests/instagram-token-retrieval.test.ts",
      "status": "failed",
      "duration": 3403,
      "errors": [
        "Error: \nsrc/tests/instagram-token-retrieval.test.ts:\n(pass) Instagram encrypted token retrieval > initializes API client with decrypted token [1503.27ms]\n2025-08-21T18:07:18.349Z ERROR ⚠️ Graph API attempt 1 failed {\"component\":\"InstagramMessagingService\"} {}\n2025-08-21T18:07:18.851Z ERROR ⚠️ Graph API attempt 2 failed {\"component\":\"InstagramMessagingService\"} {}\n2025-08-21T18:07:19.853Z ERROR ⚠️ Graph API attempt 3 failed {\"component\":\"InstagramMessagingService\"} {}\n2025-08-21T18:07:19.853Z ERROR ❌ Instagram messaging failed {\"component\":\"InstagramMessagingService\"} {}\n82 |       return { ok: true, json: async () => ({ message_id: 'mid1' }) } as any;\n83 |     });\n84 |     (globalThis as any).fetch = fetchMock;\n85 | \n86 |     const res = await service.sendTextMessage('merchant1', 'recipient1', 'hello');\n87 |     expect(res.success).toBe(true);\n                             ^\nerror: expect(received).toBe(expected)\n\nExpected: true\nReceived: false\n\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/instagram-token-retrieval.test.ts:87:25)\n(fail) Instagram encrypted token retrieval > sendTextMessage uses decrypted token [1523.75ms]\n\n 1 pass\n 1 fail\n 2 expect() calls\nRan 2 tests across 1 file. [3.20s]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/tests/instagram-webhook.test.ts",
      "status": "passed",
      "duration": 191,
      "coverage": 0
    },
    {
      "file": "src/tests/media-id-uniqueness.test.ts",
      "status": "failed",
      "duration": 1931,
      "errors": [
        "Error: \nsrc/tests/media-id-uniqueness.test.ts:\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new InstagramWebhookHandler (1:17)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/media-id-uniqueness.test.ts:6:21)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/media-id-uniqueness.test.ts:5:54)\n(fail) Media ID generation > generates unique IDs across multiple calls [7.42ms]\n\n 0 pass\n 1 fail\nRan 1 test across 1 file. [1.68s]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/tests/meta-rate-limiter.test.ts",
      "status": "passed",
      "duration": 561,
      "coverage": 0
    },
    {
      "file": "src/tests/oauth-session-pkce.test.ts",
      "status": "passed",
      "duration": 1349,
      "coverage": 0
    },
    {
      "file": "src/tests/raw-body-middleware.test.ts",
      "status": "passed",
      "duration": 378,
      "coverage": 0
    },
    {
      "file": "src/tests/rls-wrapper.test.ts",
      "status": "failed",
      "duration": 396,
      "errors": [
        "Error: \nsrc/tests/rls-wrapper.test.ts:\n204 |       }\n205 |     }\n206 | \n207 |   // Throw if validation failed\n208 |   if (errors.length > 0) {\n209 |     throw new EnvironmentValidationError(errors);\n                                                     ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:48)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at new RLSDatabase (1:17)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/rls-wrapper.test.ts:6:16)\n(fail) RLSDatabase session ID generation > generateSessionId should produce unique IDs for consecutive calls [6.99ms]\n\n 0 pass\n 1 fail\nRan 1 test across 1 file. [230.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/tests/sql-injection.test.ts",
      "status": "failed",
      "duration": 522,
      "errors": [
        "Error: \nsrc/tests/sql-injection.test.ts:\n\n# Unhandled error between tests\n-------------------------------\n154 | /**\n155 |  * Validation errors collected during environment check\n156 |  */\n157 | export class EnvironmentValidationError extends Error {\n158 |   constructor(public errors: string[]) {\n159 |     super(`Environment validation failed:\\n${errors.map(e => `  • ${e}`).join('\\n')}`);\n          ^\nEnvironmentValidationError: Environment validation failed:\n  • Missing required environment variable: INTERNAL_API_KEY\n  • Missing required environment variable: BASE_URL\n errors: [ \"Missing required environment variable: INTERNAL_API_KEY\", \"Missing required environment variable: BASE_URL\" ],\n\n      at new EnvironmentValidationError (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:159:5)\n      at loadAndValidateEnvironment (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:209:11)\n      at getConfig (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/config/environment.ts:333:20)\n      at new DatabaseConnection (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:73:23)\n      at getDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:429:18)\n      at initializeDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:438:14)\n      at initializeDatabase (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/database/connection.ts:437:41)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/sql-injection.test.ts:17:22)\n      at <anonymous> (/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/sql-injection.test.ts:16:13)\n-------------------------------\n\n(fail) Database query sanitization > rejects malicious merchantId input\n\n 0 pass\n 1 fail\n 1 error\nRan 1 test across 1 file. [360.00ms]\n",
        "Error: Process exited with code 1"
      ]
    },
    {
      "file": "src/tests/utility-messages.test.ts",
      "status": "passed",
      "duration": 193,
      "coverage": 0
    },
    {
      "file": "src/tests/whatsapp-signature.test.ts",
      "status": "failed",
      "duration": 342,
      "errors": [
        "Error: \nsrc/tests/whatsapp-signature.test.ts:\n\n# Unhandled error between tests\n-------------------------------\nerror: Cannot find module '../services/whatsapp-api.js' from '/mnt/c/Users/jaafa/Desktop/New folder (8)/ai-sales-platform/src/tests/whatsapp-signature.test.ts'\n-------------------------------\n\n\n 0 pass\n 1 fail\n 1 error\nRan 1 test across 1 file. [198.00ms]\n",
        "Error: Process exited with code 1"
      ]
    }
  ]
}
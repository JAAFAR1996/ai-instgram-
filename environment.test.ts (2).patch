--- /mnt/data/work/src4/src/config/environment.test.ts
+++ /mnt/data/work/src4/src/config/environment.test.ts
@@ -14,6 +14,7 @@
   type AppConfig
 } from './index.js';
 import { validateRuntimeConfig, EnvironmentValidationError } from './validators.js';
+import { getEnv } from 'env.js';
 
 describe('Environment Configuration - تكوين متغيرات البيئة', () => {
   let originalEnv: NodeJS.ProcessEnv;
@@ -82,14 +83,14 @@
     });
 
     test('should throw error for missing required DATABASE_URL', () => {
-      delete process.env.DATABASE_URL;
+      delete getEnv('DATABASE_URL');
       
       expect(() => loadAndValidateEnvironment()).toThrow(EnvironmentValidationError);
       expect(() => loadAndValidateEnvironment()).toThrow(/Missing required environment variable: DATABASE_URL/);
     });
 
     test('should throw error for invalid DATABASE_URL format', () => {
-      process.env.DATABASE_URL = 'invalid-url';
+      getEnv('DATABASE_URL') = 'invalid-url';
       
       expect(() => loadAndValidateEnvironment()).toThrow(EnvironmentValidationError);
       expect(() => loadAndValidateEnvironment()).toThrow(/DATABASE_URL must be a valid PostgreSQL connection string/);
@@ -97,90 +98,90 @@
 
     test('should validate Instagram App ID format', () => {
       // Too short
-      process.env.IG_APP_ID = '123';
+      getEnv('IG_APP_ID') = '123';
       expect(() => loadAndValidateEnvironment()).toThrow(/IG_APP_ID must be a numeric string with at least 10 digits/);
       
       // Non-numeric
-      process.env.IG_APP_ID = 'abc1234567890';
+      getEnv('IG_APP_ID') = 'abc1234567890';
       expect(() => loadAndValidateEnvironment()).toThrow(/IG_APP_ID must be a numeric string with at least 10 digits/);
       
       // Valid
-      process.env.IG_APP_ID = '1234567890123';
+      getEnv('IG_APP_ID') = '1234567890123';
       expect(() => loadAndValidateEnvironment()).not.toThrow();
     });
 
     test('should validate Instagram App Secret length', () => {
-      process.env.IG_APP_SECRET = 'short';
+      getEnv('IG_APP_SECRET') = 'short';
       expect(() => loadAndValidateEnvironment()).toThrow(/IG_APP_SECRET must be at least 20 characters long/);
       
-      process.env.IG_APP_SECRET = 'long_enough_secret_123456';
+      getEnv('IG_APP_SECRET') = 'long_enough_secret_123456';
       expect(() => loadAndValidateEnvironment()).not.toThrow();
     });
 
     test('should validate OpenAI API key format', () => {
       // Wrong prefix
-      process.env.OPENAI_API_KEY = 'invalid-key-format';
+      getEnv('OPENAI_API_KEY') = 'invalid-key-format';
       expect(() => loadAndValidateEnvironment()).toThrow(/OPENAI_API_KEY must start with "sk-"/);
       
       // Too short
-      process.env.OPENAI_API_KEY = 'sk-short';
+      getEnv('OPENAI_API_KEY') = 'sk-short';
       expect(() => loadAndValidateEnvironment()).toThrow(/OPENAI_API_KEY must start with "sk-"/);
       
       // Valid
-      process.env.OPENAI_API_KEY = 'sk-valid_key_with_proper_length_12345';
+      getEnv('OPENAI_API_KEY') = 'sk-valid_key_with_proper_length_12345';
       expect(() => loadAndValidateEnvironment()).not.toThrow();
     });
 
     test('should validate encryption key format', () => {
       // Too short
-      process.env.ENCRYPTION_KEY = 'short_key';
+      getEnv('ENCRYPTION_KEY') = 'short_key';
       expect(() => loadAndValidateEnvironment()).toThrow(/ENCRYPTION_KEY must be 32 bytes/);
       
       // Valid hex format
-      process.env.ENCRYPTION_KEY = '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef';
+      getEnv('ENCRYPTION_KEY') = '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef';
       expect(() => loadAndValidateEnvironment()).not.toThrow();
       
       // Valid 32-char ASCII
-      process.env.ENCRYPTION_KEY = '12345678901234567890123456789012';
+      getEnv('ENCRYPTION_KEY') = '12345678901234567890123456789012';
       expect(() => loadAndValidateEnvironment()).not.toThrow();
     });
 
     test('should validate CORS origins format', () => {
-      process.env.CORS_ORIGINS = '';
+      getEnv('CORS_ORIGINS') = '';
       expect(() => loadAndValidateEnvironment()).toThrow(/Missing required environment variable: CORS_ORIGINS/);
       
-      process.env.CORS_ORIGINS = 'https://example.com,https://app.example.com';
+      getEnv('CORS_ORIGINS') = 'https://example.com,https://app.example.com';
       expect(() => loadAndValidateEnvironment()).not.toThrow();
     });
 
     test('should validate redirect URI format', () => {
       // HTTP instead of HTTPS
-      process.env.REDIRECT_URI = 'http://example.com/auth/instagram/callback';
+      getEnv('REDIRECT_URI') = 'http://example.com/auth/instagram/callback';
       expect(() => loadAndValidateEnvironment()).toThrow(/REDIRECT_URI must be a valid HTTPS URL/);
       
       // Missing callback path
-      process.env.REDIRECT_URI = 'https://example.com/auth/other';
+      getEnv('REDIRECT_URI') = 'https://example.com/auth/other';
       expect(() => loadAndValidateEnvironment()).toThrow(/REDIRECT_URI must be a valid HTTPS URL/);
       
       // Valid
-      process.env.REDIRECT_URI = 'https://example.com/auth/instagram/callback';
+      getEnv('REDIRECT_URI') = 'https://example.com/auth/instagram/callback';
       expect(() => loadAndValidateEnvironment()).not.toThrow();
     });
 
     test('should validate Redis URL format', () => {
-      process.env.REDIS_URL = 'invalid-redis-url';
+      getEnv('REDIS_URL') = 'invalid-redis-url';
       expect(() => loadAndValidateEnvironment()).toThrow(/REDIS_URL must be a valid Redis connection string/);
       
-      process.env.REDIS_URL = 'redis://localhost:6379';
-      expect(() => loadAndValidateEnvironment()).not.toThrow();
-      
-      process.env.REDIS_URL = 'rediss://secure-redis:6380';
+      getEnv('REDIS_URL') = 'redis://localhost:6379';
+      expect(() => loadAndValidateEnvironment()).not.toThrow();
+      
+      getEnv('REDIS_URL') = 'rediss://secure-redis:6380';
       expect(() => loadAndValidateEnvironment()).not.toThrow();
     });
 
     test('should use default values for optional variables', () => {
-      delete process.env.NODE_ENV;
-      delete process.env.GRAPH_API_VERSION;
+      delete getEnv('NODE_ENV');
+      delete getEnv('GRAPH_API_VERSION');
       
       const config = loadAndValidateEnvironment();
       
@@ -189,30 +190,30 @@
     });
 
     test('should validate NODE_ENV values', () => {
-      process.env.NODE_ENV = 'invalid_env';
+      getEnv('NODE_ENV') = 'invalid_env';
       expect(() => loadAndValidateEnvironment()).toThrow(/NODE_ENV must be development, production, or test/);
       
-      process.env.NODE_ENV = 'production';
+      getEnv('NODE_ENV') = 'production';
       expect(() => loadAndValidateEnvironment()).not.toThrow();
     });
 
     test('should validate Graph API version format', () => {
-      process.env.GRAPH_API_VERSION = 'invalid_version';
+      getEnv('GRAPH_API_VERSION') = 'invalid_version';
       expect(() => loadAndValidateEnvironment()).toThrow(/GRAPH_API_VERSION must be in format v\{major\}.\{minor\}/);
       
-      process.env.GRAPH_API_VERSION = 'v23.0';
+      getEnv('GRAPH_API_VERSION') = 'v23.0';
       expect(() => loadAndValidateEnvironment()).not.toThrow();
     });
   });
 
   describe('Production Environment Validation - التحقق من بيئة الإنتاج', () => {
     beforeEach(() => {
-      process.env.NODE_ENV = 'production';
+      getEnv('NODE_ENV') = 'production';
     });
 
     test('should warn about development redirect URI in production', () => {
       const consoleSpy = vi.spyOn(console, 'warn');
-      process.env.REDIRECT_URI = 'https://localhost:3000/auth/instagram/callback';
+      getEnv('REDIRECT_URI') = 'https://localhost:3000/auth/instagram/callback';
       
       loadAndValidateEnvironment();
       
@@ -221,14 +222,14 @@
     });
 
     test('should reject wildcard CORS in production', () => {
-      process.env.CORS_ORIGINS = '*';
+      getEnv('CORS_ORIGINS') = '*';
       
       expect(() => loadAndValidateEnvironment()).toThrow(/CORS_ORIGINS should not be "\*" in production/);
     });
 
     test('should allow proper production configuration', () => {
-      process.env.CORS_ORIGINS = 'https://myapp.com,https://api.myapp.com';
-      process.env.REDIRECT_URI = 'https://myapp.com/auth/instagram/callback';
+      getEnv('CORS_ORIGINS') = 'https://myapp.com,https://api.myapp.com';
+      getEnv('REDIRECT_URI') = 'https://myapp.com/auth/instagram/callback';
       
       expect(() => loadAndValidateEnvironment()).not.toThrow();
     });
@@ -236,7 +237,7 @@
 
   describe('Database Configuration Parsing - تحليل تكوين قاعدة البيانات', () => {
     test('should parse PostgreSQL URL correctly', () => {
-      process.env.DATABASE_URL = 'postgresql://user:password@db.example.com:5432/mydb?sslmode=require';
+      getEnv('DATABASE_URL') = 'postgresql://user:password@db.example.com:5432/mydb?sslmode=require';
       
       const config = loadAndValidateEnvironment();
       
@@ -245,7 +246,7 @@
     });
 
     test('should disable SSL when sslmode=disable', () => {
-      process.env.DATABASE_URL = 'postgresql://user:password@localhost:5432/testdb?sslmode=disable';
+      getEnv('DATABASE_URL') = 'postgresql://user:password@localhost:5432/testdb?sslmode=disable';
       
       const config = loadAndValidateEnvironment();
       
@@ -253,7 +254,7 @@
     });
 
     test('should enable SSL by default for Render compatibility', () => {
-      process.env.DATABASE_URL = 'postgresql://user:password@localhost:5432/testdb';
+      getEnv('DATABASE_URL') = 'postgresql://user:password@localhost:5432/testdb';
       
       const config = loadAndValidateEnvironment();
       
@@ -261,7 +262,7 @@
     });
 
     test('should handle database max connections', () => {
-      process.env.DB_MAX_CONNECTIONS = '50';
+      getEnv('DB_MAX_CONNECTIONS') = '50';
       
       const config = loadAndValidateEnvironment();
       
@@ -269,7 +270,7 @@
     });
 
     test('should throw error for invalid database URL', () => {
-      process.env.DATABASE_URL = 'not-a-valid-url';
+      getEnv('DATABASE_URL') = 'not-a-valid-url';
       
       expect(() => loadAndValidateEnvironment()).toThrow(/DATABASE_URL must be a valid PostgreSQL connection string/);
     });
@@ -324,7 +325,7 @@
 
   describe('Environment Variable Utilities - أدوات متغيرات البيئة', () => {
     test('should get environment variable successfully', () => {
-      process.env.TEST_VAR = 'test_value';
+      getEnv('TEST_VAR') = 'test_value';
       
       const value = getEnvVar('TEST_VAR');
       
@@ -332,7 +333,7 @@
     });
 
     test('should use default value when variable not set', () => {
-      delete process.env.TEST_VAR;
+      delete getEnv('TEST_VAR');
       
       const value = getEnvVar('TEST_VAR', 'default_value');
       
@@ -340,13 +341,13 @@
     });
 
     test('should throw error for missing required variable', () => {
-      delete process.env.TEST_VAR;
+      delete getEnv('TEST_VAR');
       
       expect(() => getEnvVar('TEST_VAR')).toThrow(/Required environment variable TEST_VAR is not set/);
     });
 
     test('should return actual value over default when set', () => {
-      process.env.TEST_VAR = 'actual_value';
+      getEnv('TEST_VAR') = 'actual_value';
       
       const value = getEnvVar('TEST_VAR', 'default_value');
       
@@ -366,7 +367,7 @@
       const config1 = getConfig();
       resetConfig();
       
-      process.env.PORT = '4000';
+      getEnv('PORT') = '4000';
       const config2 = getConfig();
       
       expect(config1).not.toBe(config2);
@@ -375,7 +376,7 @@
 
     test('should validate configuration on first load', () => {
       resetConfig();
-      process.env.OPENAI_API_KEY = 'invalid-key';
+      getEnv('OPENAI_API_KEY') = 'invalid-key';
       
       expect(() => getConfig()).toThrow(EnvironmentValidationError);
     });
@@ -383,9 +384,9 @@
 
   describe('Complex Configuration Scenarios - سيناريوهات التكوين المعقدة', () => {
     test('should handle multiple validation errors', () => {
-      delete process.env.DATABASE_URL;
-      delete process.env.OPENAI_API_KEY;
-      process.env.IG_APP_ID = 'invalid';
+      delete getEnv('DATABASE_URL');
+      delete getEnv('OPENAI_API_KEY');
+      getEnv('IG_APP_ID') = 'invalid';
       
       let error: EnvironmentValidationError | null = null;
       try {
@@ -402,11 +403,11 @@
     });
 
     test('should handle complete valid production configuration', () => {
-      process.env.NODE_ENV = 'production';
-      process.env.CORS_ORIGINS = 'https://myapp.com,https://api.myapp.com';
-      process.env.REDIRECT_URI = 'https://myapp.com/auth/instagram/callback';
-      process.env.BASE_URL = 'https://api.myapp.com';
-      process.env.REDIS_URL = 'rediss://redis.myapp.com:6380';
+      getEnv('NODE_ENV') = 'production';
+      getEnv('CORS_ORIGINS') = 'https://myapp.com,https://api.myapp.com';
+      getEnv('REDIRECT_URI') = 'https://myapp.com/auth/instagram/callback';
+      getEnv('BASE_URL') = 'https://api.myapp.com';
+      getEnv('REDIS_URL') = 'rediss://redis.myapp.com:6380';
       
       const config = loadAndValidateEnvironment();
       validateRuntimeConfig(config);
@@ -418,15 +419,15 @@
 
     test('should handle all optional parameters with defaults', () => {
       // Remove all optional environment variables
-      delete process.env.NODE_ENV;
-      delete process.env.GRAPH_API_VERSION;
-      delete process.env.PORT;
-      delete process.env.OPENAI_MODEL;
-      delete process.env.OPENAI_MAX_TOKENS;
-      delete process.env.OPENAI_TEMPERATURE;
-      delete process.env.RATE_LIMIT_WINDOW;
-      delete process.env.RATE_LIMIT_MAX;
-      delete process.env.DB_MAX_CONNECTIONS;
+      delete getEnv('NODE_ENV');
+      delete getEnv('GRAPH_API_VERSION');
+      delete getEnv('PORT');
+      delete getEnv('OPENAI_MODEL');
+      delete getEnv('OPENAI_MAX_TOKENS');
+      delete getEnv('OPENAI_TEMPERATURE');
+      delete getEnv('RATE_LIMIT_WINDOW');
+      delete getEnv('RATE_LIMIT_MAX');
+      delete getEnv('DB_MAX_CONNECTIONS');
       
       const config = loadAndValidateEnvironment();
       
@@ -441,11 +442,11 @@
     });
 
     test('should parse numeric environment variables correctly', () => {
-      process.env.PORT = '8080';
-      process.env.OPENAI_MAX_TOKENS = '1000';
-      process.env.OPENAI_TEMPERATURE = '0.9';
-      process.env.RATE_LIMIT_MAX = '200';
-      process.env.DB_MAX_CONNECTIONS = '50';
+      getEnv('PORT') = '8080';
+      getEnv('OPENAI_MAX_TOKENS') = '1000';
+      getEnv('OPENAI_TEMPERATURE') = '0.9';
+      getEnv('RATE_LIMIT_MAX') = '200';
+      getEnv('DB_MAX_CONNECTIONS') = '50';
       
       const config = loadAndValidateEnvironment();
       
@@ -459,13 +460,13 @@
 
   describe('Edge Cases and Error Handling - الحالات الحدية والتعامل مع الأخطاء', () => {
     test('should handle empty string environment variables', () => {
-      process.env.IG_APP_SECRET = '';
+      getEnv('IG_APP_SECRET') = '';
       
       expect(() => loadAndValidateEnvironment()).toThrow(/Missing required environment variable: IG_APP_SECRET/);
     });
 
     test('should handle whitespace in CORS origins', () => {
-      process.env.CORS_ORIGINS = ' https://example.com , https://app.example.com ';
+      getEnv('CORS_ORIGINS') = ' https://example.com , https://app.example.com ';
       
       const config = loadAndValidateEnvironment();
       
@@ -473,7 +474,7 @@
     });
 
     test('should handle empty trusted redirect domains', () => {
-      delete process.env.TRUSTED_REDIRECT_DOMAINS;
+      delete getEnv('TRUSTED_REDIRECT_DOMAINS');
       
       const config = loadAndValidateEnvironment();
       
@@ -481,7 +482,7 @@
     });
 
     test('should handle malformed numeric values gracefully', () => {
-      process.env.PORT = 'not-a-number';
+      getEnv('PORT') = 'not-a-number';
       
       const config = loadAndValidateEnvironment();
       
@@ -489,7 +490,7 @@
     });
 
     test('should trim meta app secret whitespace', () => {
-      process.env.META_APP_SECRET = '  secret_with_whitespace  ';
+      getEnv('META_APP_SECRET') = '  secret_with_whitespace  ';
       
       const config = loadAndValidateEnvironment();
       

--- /mnt/data/work/src4/src/middleware/security.test.ts
+++ /mnt/data/work/src4/src/middleware/security.test.ts
@@ -11,6 +11,7 @@
 import crypto from 'crypto';
 
 import {
+import { getEnv } from '../config/env.js';
   rateLimitMiddleware,
   merchantRateLimitMiddleware,
   windowEnforcementMiddleware,
@@ -614,7 +615,7 @@
     });
 
     test('✅ should allow approved origins', async () => {
-      process.env.ALLOWED_ORIGINS = 'https://app.example.com,https://admin.example.com';
+      getEnv('ALLOWED_ORIGINS') = 'https://app.example.com,https://admin.example.com';
       
       const res = await app.request('/', {
         headers: {
@@ -625,7 +626,7 @@
       expect(res.status).toBe(200);
       expect(res.headers.get('Access-Control-Allow-Origin')).toBe('https://app.example.com');
       
-      delete process.env.ALLOWED_ORIGINS;
+      delete getEnv('ALLOWED_ORIGINS');
     });
 
     test('✅ should not set CORS origin for unapproved origins', async () => {
@@ -659,8 +660,8 @@
     });
 
     test('✅ should set HSTS in production', async () => {
-      const originalEnv = process.env.NODE_ENV;
-      process.env.NODE_ENV = 'production';
+      const originalEnv = getEnv('NODE_ENV');
+      getEnv('NODE_ENV') = 'production';
       
       const prodApp = new Hono();
       prodApp.use(securityHeadersMiddleware());
@@ -670,7 +671,7 @@
       
       expect(res.headers.get('Strict-Transport-Security')).toContain('max-age=31536000');
       
-      process.env.NODE_ENV = originalEnv;
+      getEnv('NODE_ENV') = originalEnv;
     });
   });
 

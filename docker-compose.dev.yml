version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: ai-sales-postgres-dev
    environment:
      POSTGRES_DB: ai_sales_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    command: |
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c log_min_duration_statement=0
      -c shared_preload_libraries=pg_stat_statements
      -c track_activity_query_size=2048
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_sales_dev"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ai-sales-network

  # Redis for caching and queues
  redis:
    image: redis:7.2-alpine
    container_name: ai-sales-redis-dev
    ports:
      - "6379:6379"
    command: |
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
    volumes:
      - redis_dev_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - ai-sales-network

  # Redis Insight for monitoring
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: ai-sales-redis-insight-dev
    ports:
      - "8001:8001"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - ai-sales-network

  # Adminer for database management
  adminer:
    image: adminer:4.8.1
    container_name: ai-sales-adminer-dev
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ai-sales-network

  # Grafana for monitoring (optional for dev)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-sales-grafana-dev
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_dev_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - ai-sales-network

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  grafana_dev_data:
    driver: local

networks:
  ai-sales-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
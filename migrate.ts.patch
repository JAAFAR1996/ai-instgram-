--- /mnt/data/work/src4/src/database/migrate.ts
+++ /mnt/data/work/src4/src/database/migrate.ts
@@ -10,6 +10,7 @@
 import { getDatabase } from '../db/adapter.js';
 import type { SqlFunction } from '../db/sql-template.js';
 import type { Migration } from '../types/database.js';
+import { logger } from '../services/logger.js';
 
 export class MigrationRunner {
   private db = getDatabase();
@@ -24,7 +25,7 @@
    */
   public async migrate(): Promise<void> {
     try {
-      console.log('🚀 Starting database migrations...');
+      logger.info('🚀 Starting database migrations...');
       
       // Ensure database connection
       if (!this.db.isReady()) {
@@ -38,18 +39,18 @@
       const pendingMigrations = await this.getPendingMigrations();
       
       if (pendingMigrations.length === 0) {
-        console.log('✅ No pending migrations found');
+        logger.info('✅ No pending migrations found');
         return;
       }
 
-      console.log(`📋 Found ${pendingMigrations.length} pending migrations`);
+      logger.info(`📋 Found ${pendingMigrations.length} pending migrations`);
 
       // Run each migration in transaction
       for (const migration of pendingMigrations) {
         await this.runMigration(migration);
       }
 
-      console.log('✅ All migrations completed successfully');
+      logger.info('✅ All migrations completed successfully');
     } catch (error) {
       console.error('❌ Migration failed:', error);
       throw error;
@@ -61,11 +62,11 @@
    */
   public async rollback(): Promise<void> {
     try {
-      console.log('🔄 Starting migration rollback...');
+      logger.info('🔄 Starting migration rollback...');
       
       const lastMigration = await this.getLastExecutedMigration();
       if (!lastMigration) {
-        console.log('ℹ️ No migrations to rollback');
+        logger.info('ℹ️ No migrations to rollback');
         return;
       }
 
@@ -86,7 +87,7 @@
           `;
         });
 
-        console.log(`✅ Rollback completed for migration: ${lastMigration.name}`);
+        logger.info(`✅ Rollback completed for migration: ${lastMigration.name}`);
       } catch (error) {
         console.error(`❌ Rollback file not found: ${rollbackPath}`);
         throw new Error(`Cannot rollback migration ${lastMigration.name}: rollback file missing`);
@@ -159,7 +160,7 @@
         await fs.writeFile(filepath, template, 'utf-8');
       });
 
-      console.log(`✅ Migration file created: ${filename}`);
+      logger.info(`✅ Migration file created: ${filename}`);
       return filepath;
     } catch (error) {
       console.error('❌ Error creating migration:', error);
@@ -172,7 +173,7 @@
    */
   public async validate(): Promise<boolean> {
     try {
-      console.log('🔍 Validating migrations...');
+      logger.info('🔍 Validating migrations...');
       
       const migrationFiles = await this.getAllMigrationFiles();
       let isValid = true;
@@ -192,7 +193,7 @@
           // Check for required elements
           // لم نعد نلزم الملف بتسجيل نفسه. التسجيل مركزي بعد التنفيذ.
 
-          console.log(`✅ ${file} - Valid`);
+          logger.info(`✅ ${file} - Valid`);
         } catch (error) {
           console.error(`❌ ${file} - Invalid:`, error);
           isValid = false;
@@ -200,7 +201,7 @@
       }
 
       if (isValid) {
-        console.log('✅ All migrations are valid');
+        logger.info('✅ All migrations are valid');
       } else {
         console.error('❌ Some migrations have validation errors');
       }
@@ -218,8 +219,8 @@
    */
   public async reset(): Promise<void> {
     try {
-      console.log('⚠️ WARNING: This will destroy all data!');
-      console.log('🔄 Resetting database...');
+      logger.info('⚠️ WARNING: This will destroy all data!');
+      logger.info('🔄 Resetting database...');
       
       await this.db.transaction(async (sql: SqlFunction) => {
         // Drop all tables in reverse dependency order
@@ -248,7 +249,7 @@
         await sql`DROP FUNCTION IF EXISTS get_performance_metrics(INTEGER) CASCADE`;
       });
 
-      console.log('🗑️ Database reset completed');
+      logger.info('🗑️ Database reset completed');
       
       // Re-run all migrations
       await this.migrate();
@@ -340,7 +341,7 @@
     const migrationName = this.extractMigrationName(filename);
     
     try {
-      console.log(`📄 Running migration: ${migrationName}`);
+      logger.info(`📄 Running migration: ${migrationName}`);
       
       const sql_content = await readFile(filepath, 'utf-8');
       
@@ -356,7 +357,7 @@
         `;
       });
       
-      console.log(`✅ Migration completed: ${migrationName}`);
+      logger.info(`✅ Migration completed: ${migrationName}`);
     } catch (error) {
       console.error(`❌ Migration failed: ${migrationName}`, error);
       throw new Error(`Migration ${filename} failed: ${error}`);
@@ -424,11 +425,11 @@
         break;
       case 'status':
         const status = await getMigrationStatus();
-        console.log('📊 Migration Status:');
-        console.log(`Total: ${status.total}, Executed: ${status.executed}, Pending: ${status.pending}`);
+        logger.info('📊 Migration Status:');
+        logger.info(`Total: ${status.total}, Executed: ${status.executed}, Pending: ${status.pending}`);
         status.migrations.forEach((m: any) => {
           const indicator = m.status === 'executed' ? '✅' : '⏳';
-          console.log(`${indicator} ${m.name} (${m.filename})`);
+          logger.info(`${indicator} ${m.name} (${m.filename})`);
         });
         break;
       case 'create':
@@ -444,17 +445,17 @@
         process.exit(isValid ? 0 : 1);
         break;
       case 'reset':
-        console.log('⚠️ WARNING: This will destroy ALL data!');
+        logger.info('⚠️ WARNING: This will destroy ALL data!');
         await resetDatabase();
         break;
       default:
-        console.log('📖 Available commands:');
-        console.log('  migrate   - Run pending migrations');
-        console.log('  rollback  - Rollback last migration');
-        console.log('  status    - Show migration status');
-        console.log('  create    - Create new migration');
-        console.log('  validate  - Validate all migrations');
-        console.log('  reset     - Reset database (DANGER!)');
+        logger.info('📖 Available commands:');
+        logger.info('  migrate   - Run pending migrations');
+        logger.info('  rollback  - Rollback last migration');
+        logger.info('  status    - Show migration status');
+        logger.info('  create    - Create new migration');
+        logger.info('  validate  - Validate all migrations');
+        logger.info('  reset     - Reset database (DANGER!)');
     }
   } catch (error) {
     console.error('❌ Command failed:', error);
